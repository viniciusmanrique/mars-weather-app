'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = require('react');
var React__default = _interopDefault(React);
var styled = require('styled-components');
var styled__default = _interopDefault(styled);
var reactDom = _interopDefault(require('react-dom'));
var propTypes = _interopDefault(require('prop-types'));

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
}

function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  subClass.__proto__ = superClass;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */

var NODE_ENV = process.env.NODE_ENV;

var invariant = function(condition, format, a, b, c, d, e, f) {
  if (NODE_ENV !== 'production') {
    if (format === undefined) {
      throw new Error('invariant requires an error message argument');
    }
  }

  if (!condition) {
    var error;
    if (format === undefined) {
      error = new Error(
        'Minified exception occurred; use the non-minified dev environment ' +
        'for the full error message and additional helpful warnings.'
      );
    } else {
      var args = [a, b, c, d, e, f];
      var argIndex = 0;
      error = new Error(
        format.replace(/%s/g, function() { return args[argIndex++]; })
      );
      error.name = 'Invariant Violation';
    }

    error.framesToPop = 1; // we don't care about invariant's own frame
    throw error;
  }
};

var invariant_1 = invariant;

var INSTANCE_MAP = new Map();
var OBSERVER_MAP = new Map();
var ROOT_IDS = new Map();
var consecutiveRootId = 0;
/**
 * Generate a unique ID for the root element
 * @param root
 */

function getRootId(root) {
  if (!root) return '';
  if (ROOT_IDS.has(root)) return ROOT_IDS.get(root);
  consecutiveRootId += 1;
  ROOT_IDS.set(root, consecutiveRootId.toString());
  return ROOT_IDS.get(root) + '_';
}
/**
 * Monitor element, and trigger callback when element becomes inView
 * @param element {HTMLElement}
 * @param callback {Function} Called with inView
 * @param options {Object} InterSection observer options
 * @param options.threshold {Number} Number between 0 and 1, indicating how much of the element should be inView before triggering
 * @param options.root {HTMLElement}
 * @param options.rootMargin {String} The CSS margin to apply to the root element.
 */


function observe(element, callback, options) {
  if (options === void 0) {
    options = {};
  }

  // IntersectionObserver needs a threshold to trigger, so set it to 0 if it's not defined.
  // Modify the options object, since it's used in the onChange handler.
  if (!options.threshold) options.threshold = 0;
  var _options = options,
      root = _options.root,
      rootMargin = _options.rootMargin,
      threshold = _options.threshold; // Validate that the element is not being used in another <Observer />

  invariant_1(!INSTANCE_MAP.has(element), "react-intersection-observer: Trying to observe %s, but it's already being observed by another instance.\nMake sure the `ref` is only used by a single <Observer /> instance.\n\n%s", element);
  /* istanbul ignore if */

  if (!element) return; // Create a unique ID for this observer instance, based on the root, root margin and threshold.
  // An observer with the same options can be reused, so lets use this fact

  var observerId = getRootId(root) + (rootMargin ? threshold.toString() + "_" + rootMargin : threshold.toString());
  var observerInstance = OBSERVER_MAP.get(observerId);

  if (!observerInstance) {
    observerInstance = new IntersectionObserver(onChange, options);
    /* istanbul ignore else  */

    if (observerId) OBSERVER_MAP.set(observerId, observerInstance);
  }

  var instance = {
    callback: callback,
    element: element,
    inView: false,
    observerId: observerId,
    observer: observerInstance,
    // Make sure we have the thresholds value. It's undefined on a browser like Chrome 51.
    thresholds: observerInstance.thresholds || (Array.isArray(threshold) ? threshold : [threshold])
  };
  INSTANCE_MAP.set(element, instance);
  observerInstance.observe(element);
  return instance;
}
/**
 * Stop observing an element. If an element is removed from the DOM or otherwise destroyed,
 * make sure to call this method.
 * @param element {Element}
 */

function unobserve(element) {
  if (!element) return;
  var instance = INSTANCE_MAP.get(element);

  if (instance) {
    var observerId = instance.observerId,
        observer = instance.observer;
    var root = observer.root;
    observer.unobserve(element); // Check if we are still observing any elements with the same threshold.

    var itemsLeft = false; // Check if we still have observers configured with the same root.

    var rootObserved = false;
    /* istanbul ignore else  */

    if (observerId) {
      INSTANCE_MAP.forEach(function (item, key) {
        if (key !== element) {
          if (item.observerId === observerId) {
            itemsLeft = true;
            rootObserved = true;
          }

          if (item.observer.root === root) {
            rootObserved = true;
          }
        }
      });
    }

    if (!rootObserved && root) ROOT_IDS["delete"](root);

    if (observer && !itemsLeft) {
      // No more elements to observe for threshold, disconnect observer
      observer.disconnect();
    } // Remove reference to element


    INSTANCE_MAP["delete"](element);
  }
}

function onChange(changes) {
  changes.forEach(function (intersection) {
    var isIntersecting = intersection.isIntersecting,
        intersectionRatio = intersection.intersectionRatio,
        target = intersection.target;
    var instance = INSTANCE_MAP.get(target); // Firefox can report a negative intersectionRatio when scrolling.

    /* istanbul ignore else */

    if (instance && intersectionRatio >= 0) {
      // If threshold is an array, check if any of them intersects. This just triggers the onChange event multiple times.
      var inView = instance.thresholds.some(function (threshold) {
        return instance.inView ? intersectionRatio > threshold : intersectionRatio >= threshold;
      });

      if (isIntersecting !== undefined) {
        // If isIntersecting is defined, ensure that the element is actually intersecting.
        // Otherwise it reports a threshold of 0
        inView = inView && isIntersecting;
      }

      instance.inView = inView;
      instance.callback(inView, intersection);
    }
  });
}

function isPlainChildren(props) {
  return typeof props.children !== 'function';
}
/**
 * Monitors scroll, and triggers the children function with updated props
 *
 <InView>
 {({inView, ref}) => (
   <h1 ref={ref}>{`${inView}`}</h1>
 )}
 </InView>
 */


var InView =
/*#__PURE__*/
function (_React$Component) {
  _inheritsLoose(InView, _React$Component);

  function InView() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;

    _defineProperty(_assertThisInitialized(_this), "state", {
      inView: false,
      entry: undefined
    });

    _defineProperty(_assertThisInitialized(_this), "node", null);

    _defineProperty(_assertThisInitialized(_this), "handleNode", function (node) {
      if (_this.node) unobserve(_this.node);
      _this.node = node ? node : null;

      _this.observeNode();
    });

    _defineProperty(_assertThisInitialized(_this), "handleChange", function (inView, entry) {
      // Only trigger a state update if inView has changed.
      // This prevents an unnecessary extra state update during mount, when the element stats outside the viewport
      if (inView !== _this.state.inView || inView) {
        _this.setState({
          inView: inView,
          entry: entry
        });
      }

      if (_this.props.onChange) {
        // If the user is actively listening for onChange, always trigger it
        _this.props.onChange(inView, entry);
      }
    });

    return _this;
  }

  var _proto = InView.prototype;

  _proto.componentDidMount = function componentDidMount() {
    /* istanbul ignore else  */
    if (process.env.NODE_ENV !== 'production') {
      invariant_1(this.node, "react-intersection-observer: No DOM node found. Make sure you forward \"ref\" to the root DOM element you want to observe.");
    }
  };

  _proto.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {
    // If a IntersectionObserver option changed, reinit the observer
    if (prevProps.rootMargin !== this.props.rootMargin || prevProps.root !== this.props.root || prevProps.threshold !== this.props.threshold) {
      unobserve(this.node);
      this.observeNode();
    }

    if (prevState.inView !== this.state.inView) {
      if (this.state.inView && this.props.triggerOnce) {
        unobserve(this.node);
        this.node = null;
      }
    }
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    if (this.node) {
      unobserve(this.node);
      this.node = null;
    }
  };

  _proto.observeNode = function observeNode() {
    if (!this.node) return;
    var _this$props = this.props,
        threshold = _this$props.threshold,
        root = _this$props.root,
        rootMargin = _this$props.rootMargin;
    observe(this.node, this.handleChange, {
      threshold: threshold,
      root: root,
      rootMargin: rootMargin
    });
  };

  _proto.render = function render() {
    var _this$state = this.state,
        inView = _this$state.inView,
        entry = _this$state.entry;

    if (!isPlainChildren(this.props)) {
      return this.props.children({
        inView: inView,
        entry: entry,
        ref: this.handleNode
      });
    }

    var _this$props2 = this.props,
        children = _this$props2.children,
        as = _this$props2.as,
        tag = _this$props2.tag,
        triggerOnce = _this$props2.triggerOnce,
        threshold = _this$props2.threshold,
        root = _this$props2.root,
        rootMargin = _this$props2.rootMargin,
        props = _objectWithoutPropertiesLoose(_this$props2, ["children", "as", "tag", "triggerOnce", "threshold", "root", "rootMargin"]);

    return React.createElement(as || tag || 'div', _extends({
      ref: this.handleNode
    }, props), children);
  };

  return InView;
}(React.Component);

_defineProperty(InView, "displayName", 'InView');

_defineProperty(InView, "defaultProps", {
  threshold: 0,
  triggerOnce: false
});

/* eslint-disable react-hooks/exhaustive-deps */
function useInView(options) {
  if (options === void 0) {
    options = {};
  }

  var ref = React.useRef();

  var _React$useState = React.useState({
    inView: false,
    entry: undefined
  }),
      state = _React$useState[0],
      setState = _React$useState[1];

  var setRef = React.useCallback(function (node) {
    if (ref.current) {
      unobserve(ref.current);
    }

    if (node) {
      observe(node, function (inView, intersection) {
        setState({
          inView: inView,
          entry: intersection
        });

        if (inView && options.triggerOnce) {
          // If it should only trigger once, unobserve the element after it's inView
          unobserve(node);
        }
      }, options);
    } // Store a reference to the node


    ref.current = node;
  }, [options.threshold, options.root, options.rootMargin, options.triggerOnce]);
  React.useDebugValue(state.inView);
  return [setRef, state.inView, state.entry];
}

/**
 * Based on **`[Pause and resume setInterval](https://stackoverflow.com/a/42240115/10246377)`**.
 * `IntervalTimer` is a class that handles logic for intervals, e.g. start
 * stop, reset, resume, pause & maximum amount of fires.
 */
var EState;
(function (EState) {
    EState[EState["IDLE"] = 0] = "IDLE";
    EState[EState["RUNNING"] = 1] = "RUNNING";
    EState[EState["PAUSED"] = 2] = "PAUSED";
    EState[EState["RESUME"] = 3] = "RESUME";
})(EState || (EState = {}));
var IntervalTimer = /** @class */ (function () {
    function IntervalTimer(callback, interval, maxFires) {
        var _this = this;
        if (maxFires === void 0) { maxFires = undefined; }
        // Init
        this.callback = function () { return null; };
        /**
         * `proxyCallback` handles the callback execution, the amount
         * of fires, & the times when fired.
         * If `this.maxFires` is **not** null, and it's bigger than
         * `this.fires` and if `this.fires` exists, meaning if it the
         * interval was at least started once before, then never fire again.
         */
        this.proxyCallback = function () {
            if (_this.maxFires != null && _this.fires !== 0 && _this.fires >= _this.maxFires) {
                _this.stop();
                return;
            }
            _this.lastTimeFired = new Date();
            _this.fires += 1;
            _this.callback();
        };
        /**
         * `start` executes the interval, and saves the interval ID for further use.
         * The time of execution is also fired in case it's paused later on. The state
         * is finally set as running.
         */
        this.start = function () {
            _this.timerId = setInterval(function () { return _this.proxyCallback(); }, _this.interval);
            _this.lastTimeFired = new Date();
            _this.state = EState.RUNNING;
        };
        /**
         * `stop` clears every respective timeout and interval, then sets the state as idle.
         */
        this.stop = function () {
            if (_this.state === 0)
                return;
            clearInterval(_this.timerId);
            clearTimeout(_this.resumeId);
            _this.state = EState.IDLE;
        };
        /**
         * Resets the interval.
         */
        this.reset = function () {
            _this.stop();
            _this.start();
        };
        /**
         * `pause` tries to mimic pausing the interval by calculating the remaining time and storing it
         * in a member variable. Afterwards clear the respective timeout and interval then set the new
         * state.
         */
        this.pause = function () {
            if (_this.state !== EState.RUNNING && _this.state !== EState.RESUME)
                return;
            _this.remaining = +_this.interval - (+new Date() - +_this.lastTimeFired) + +_this.pausedTime;
            _this.lastPauseTime = new Date();
            clearInterval(_this.timerId);
            clearTimeout(_this.resumeId);
            _this.state = EState.PAUSED;
        };
        /**
         * `resume` calculates the remaining time for the callback to trigger using the values
         * set by `paused`. Will execute a new `setTimeout` while passing the `remaining` time
         * as the timeout delay.
         */
        this.resume = function () {
            if (_this.state !== EState.PAUSED)
                return;
            var currentDate = new Date();
            _this.pausedTime = +_this.pausedTime + +currentDate - +_this.lastPauseTime;
            _this.state = EState.RESUME;
            _this.resumeId = setTimeout(function () { return _this.timeoutCallback(); }, _this.remaining);
        };
        /**
         * `timeoutCallback` is executed by `resume`. `timeoutCallback` is the
         * callback of a new `setTimeout` executed by `resume` to mimic a resume
         * function.
         * We execute the callback by running `proxyCallback`, and then `start`
         * is executed to run a new interval.
         */
        this.timeoutCallback = function () {
            if (_this.state !== EState.RESUME)
                return;
            _this.pausedTime = 0;
            _this.proxyCallback();
            _this.start();
        };
        /**
         * Set a new interval to use on the next interval loop.
         */
        this.setInterval = function (newInterval) {
            if (_this.state === 1) {
                // If running we need to instantiate (new ID) the variable.
                _this.pause();
                _this.interval = newInterval;
                _this.resume();
            }
            else {
                // If stopped, idle, or paused then switch it.
                _this.interval = newInterval;
            }
        };
        /**
         * Maximum amount of times the `callback` member will execute, it's infinite by default.
         */
        this.setMaxFires = function (newMax) {
            if (newMax != null && _this.fires >= newMax) {
                _this.stop();
            }
            _this.maxFires = newMax;
        };
        /**
         * Remaining time before the next interval.
         */
        this.remaining = 0;
        /**
         * The state to handle logic.
         * - 0 means the interval is idle.
         * - 1 means it's running.
         * - 2 means it's paused
         * - 3 will resume.
         */
        this.state = EState.IDLE;
        this.interval = interval; // In milliseconds.
        this.callback = callback;
        /**
         * Maximum amount of fires.
         */
        this.maxFires = maxFires;
        /**
         * Time passed after pausing,
         */
        this.pausedTime = 0;
        this.fires = 0;
    }
    return IntervalTimer;
}());

var EAutoplayButtons;
(function (EAutoplayButtons) {
    EAutoplayButtons["PLAY"] = "play";
    EAutoplayButtons["PAUSE"] = "pause";
})(EAutoplayButtons || (EAutoplayButtons = {}));

var EActionTypes;
(function (EActionTypes) {
    EActionTypes[EActionTypes["SET_SLIDE_PROPS"] = 0] = "SET_SLIDE_PROPS";
    EActionTypes[EActionTypes["SET_NAVBAR_PROPS"] = 1] = "SET_NAVBAR_PROPS";
    EActionTypes[EActionTypes["SET_AUTOPLAY_BUTTON_PROPS"] = 2] = "SET_AUTOPLAY_BUTTON_PROPS";
    EActionTypes[EActionTypes["SET_SLIDE_DATA"] = 3] = "SET_SLIDE_DATA";
})(EActionTypes || (EActionTypes = {}));

/**
 * Type definition for `IBackgroundProps.backgroundAnimation`.
 */
var EBackgroundAnimations;
(function (EBackgroundAnimations) {
    EBackgroundAnimations["FADE"] = "fade";
    EBackgroundAnimations["ZOOM"] = "zoom";
})(EBackgroundAnimations || (EBackgroundAnimations = {}));

// Type definitions for HeroSlider (hero-slider)
/**
 * `EAnimations` enum for the different sliding animations.
 */
var EAnimations;
(function (EAnimations) {
    EAnimations["TOP_TO_BOTTOM"] = "top_to_bottom";
    EAnimations["BOTTOM_TO_TOP"] = "bottom_to_top";
    EAnimations["LEFT_TO_RIGHT"] = "left_to_right";
    EAnimations["RIGHT_TO_LEFT"] = "right_to_left";
    EAnimations["FADE"] = "fade";
})(EAnimations || (EAnimations = {}));

/**
 * `EAnimations` enum for the different sliding animations.
 */
var EAnimations$1;
(function (EAnimations) {
    EAnimations["TOP_TO_BOTTOM"] = "top_to_bottom";
    EAnimations["BOTTOM_TO_TOP"] = "bottom_to_top";
    EAnimations["LEFT_TO_RIGHT"] = "left_to_right";
    EAnimations["RIGHT_TO_LEFT"] = "right_to_left";
    EAnimations["FADE"] = "fade";
})(EAnimations$1 || (EAnimations$1 = {}));
/**
 * `EOrientation` definition used for the `ISliderProps.orientation` prop.
 * Used to define which swipes (depending on directions) will change the slides,
 * and where and how will the buttons render, if set to render.
 */
var EOrientation;
(function (EOrientation) {
    EOrientation["VERTICAL"] = "vertical";
    EOrientation["HORIZONTAL"] = "horizontal";
})(EOrientation || (EOrientation = {}));

// Dependencies
var setInitialSlidingAnimation = function (animation) {
    switch (animation) {
        case EAnimations.FADE:
        // Top to bottom.
        case EAnimations.TOP_TO_BOTTOM:
        // Bottom to top.
        case EAnimations.BOTTOM_TO_TOP:
        // Left to right.
        case EAnimations.LEFT_TO_RIGHT:
            return animation;
        // Right to left, by default.
        case EAnimations.RIGHT_TO_LEFT:
        default:
            return EAnimations.RIGHT_TO_LEFT;
    }
};

// Keyframes and animations
var fadeInKeyframes = styled.keyframes(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n  0% {\n    opacity: 0;\n  }\n  100% {\n    opacity: 1;\n  }\n"], ["\n  0% {\n    opacity: 0;\n  }\n  100% {\n    opacity: 1;\n  }\n"])));
/*
--------------------------------
----------ANIMATIONS------------
--------------------------------
*/
var slidingDuration = styled.css(templateObject_2 || (templateObject_2 = __makeTemplateObject(["", ""], ["", ""])), function (_a) {
    var theme = _a.theme;
    return theme.slidingDuration || '600ms';
});
var slidingDelay = styled.css(templateObject_3 || (templateObject_3 = __makeTemplateObject(["", ""], ["", ""])), function (_a) {
    var theme = _a.theme;
    return theme.slidingDelay || '0ms';
});
var slideFadeInKeyframes = styled.keyframes(templateObject_4 || (templateObject_4 = __makeTemplateObject(["\n  0% {\n    opacity: 0;\n  }\n  100% {\n    opacity: 1;\n  }\n"], ["\n  0% {\n    opacity: 0;\n  }\n  100% {\n    opacity: 1;\n  }\n"])));
var slideFadeIn = styled.css(templateObject_5 || (templateObject_5 = __makeTemplateObject(["\n  /* keyframe name | duration | timing function | delay */\n  animation: ", " ", " ease-in-out ", ";\n"], ["\n  /* keyframe name | duration | timing function | delay */\n  animation: ", " ", " ease-in-out ", ";\n"])), slideFadeInKeyframes, slidingDuration, slidingDelay);
// --------------------------------
var slideLeftToRightKeyframes = styled.keyframes(templateObject_6 || (templateObject_6 = __makeTemplateObject(["\n  0% {\n    clip-path: inset(0% 100% 0% 0%);\n    -webkit-clip-path: inset(0% 100% 0% 0%);\n  }\n  100% {\n    clip-path: inset(0% 0% 0% 0%);\n    -webkit-clip-path: inset(0% 0% 0% 0%);\n  }\n"], ["\n  0% {\n    clip-path: inset(0% 100% 0% 0%);\n    -webkit-clip-path: inset(0% 100% 0% 0%);\n  }\n  100% {\n    clip-path: inset(0% 0% 0% 0%);\n    -webkit-clip-path: inset(0% 0% 0% 0%);\n  }\n"])));
var slideLeftToRight = styled.css(templateObject_7 || (templateObject_7 = __makeTemplateObject(["\n  /* keyframe name | duration | timing function | delay */\n  animation: ", " ", " ease-in-out ", ";\n"], ["\n  /* keyframe name | duration | timing function | delay */\n  animation: ", " ", " ease-in-out ", ";\n"])), slideLeftToRightKeyframes, slidingDuration, slidingDelay);
// --------------------------------
var slideRightToLeftKeyframes = styled.keyframes(templateObject_8 || (templateObject_8 = __makeTemplateObject(["\n  0% {\n    clip-path: inset(0% 0% 0% 100%);\n    -webkit-clip-path: inset(0% 0% 0% 100%);\n  }\n  100% {\n    clip-path: inset(0% 0% 0% 0%);\n    -webkit-clip-path: inset(0% 0% 0% 0%);\n  }\n"], ["\n  0% {\n    clip-path: inset(0% 0% 0% 100%);\n    -webkit-clip-path: inset(0% 0% 0% 100%);\n  }\n  100% {\n    clip-path: inset(0% 0% 0% 0%);\n    -webkit-clip-path: inset(0% 0% 0% 0%);\n  }\n"])));
var slideRightToLeft = styled.css(templateObject_9 || (templateObject_9 = __makeTemplateObject(["\n  /* keyframe name | duration | timing function | delay */\n  animation: ", " ", " ease-in-out ", ";\n"], ["\n  /* keyframe name | duration | timing function | delay */\n  animation: ", " ", " ease-in-out ", ";\n"])), slideRightToLeftKeyframes, slidingDuration, slidingDelay);
// --------------------------------
var slideTopToBottomKeyframes = styled.keyframes(templateObject_10 || (templateObject_10 = __makeTemplateObject(["\n  0% {\n    clip-path: inset(0% 0% 100% 0%);\n    -webkit-clip-path: inset(0% 0% 100% 0%);\n  }\n  100% {\n    clip-path: inset(0% 0% 0% 0%);\n    -webkit-clip-path: inset(0% 0% 0% 0%);\n  }\n"], ["\n  0% {\n    clip-path: inset(0% 0% 100% 0%);\n    -webkit-clip-path: inset(0% 0% 100% 0%);\n  }\n  100% {\n    clip-path: inset(0% 0% 0% 0%);\n    -webkit-clip-path: inset(0% 0% 0% 0%);\n  }\n"])));
var slideTopToBottom = styled.css(templateObject_11 || (templateObject_11 = __makeTemplateObject(["\n  /* keyframe name | duration | timing function | delay */\n  animation: ", " ", " ease-in-out ", ";\n"], ["\n  /* keyframe name | duration | timing function | delay */\n  animation: ", " ", " ease-in-out ", ";\n"])), slideTopToBottomKeyframes, slidingDuration, slidingDelay);
// --------------------------------
var slideBottomToTopKeyframes = styled.keyframes(templateObject_12 || (templateObject_12 = __makeTemplateObject(["\n  0% {\n    clip-path: inset(100% 0% 0% 0%);\n    -webkit-clip-path: inset(100% 0% 0% 0%);\n  }\n  100% {\n    clip-path: inset(0% 0% 0% 0%);\n    -webkit-clip-path: inset(0% 0% 0% 0%);\n  }\n"], ["\n  0% {\n    clip-path: inset(100% 0% 0% 0%);\n    -webkit-clip-path: inset(100% 0% 0% 0%);\n  }\n  100% {\n    clip-path: inset(0% 0% 0% 0%);\n    -webkit-clip-path: inset(0% 0% 0% 0%);\n  }\n"])));
var slideBottomToTop = styled.css(templateObject_13 || (templateObject_13 = __makeTemplateObject(["\n/* keyframe name | duration | timing function | delay */\nanimation: ", " ", " ease-in-out ", ";\n"], ["\n/* keyframe name | duration | timing function | delay */\nanimation: ", " ", " ease-in-out ", ";\n"])), slideBottomToTopKeyframes, slidingDuration, slidingDelay);
// --------------------------------
var animations = {
    slideFadeIn: slideFadeIn,
    slideLeftToRight: slideLeftToRight,
    slideRightToLeft: slideRightToLeft,
    slideTopToBottom: slideTopToBottom,
    slideBottomToTop: slideBottomToTop,
};
// Components
var Wrapper = styled__default.div(templateObject_14 || (templateObject_14 = __makeTemplateObject(["\n  width: 100%;\n  height: 100%;\n  position: relative;\n  overflow: hidden;\n  animation: ", " ", " ease-in;\n  /* Removes gray highlight when clicked on safari/mobile. */\n  -webkit-tap-highlight-color: rgba(0,0,0,0);\n"], ["\n  width: 100%;\n  height: 100%;\n  position: relative;\n  overflow: hidden;\n  animation: ", " ", " ease-in;\n  /* Removes gray highlight when clicked on safari/mobile. */\n  -webkit-tap-highlight-color: rgba(0,0,0,0);\n"])), fadeInKeyframes, function (_a) {
    var theme = _a.theme;
    return theme.sliderFadeInDuration || 100;
});
/*
  `pointer-events` manipulation to allow clicking inner children AND children inside the Container.
*/
var Container = styled__default.div(templateObject_15 || (templateObject_15 = __makeTemplateObject(["\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  z-index: 2;\n  pointer-events: none;\n  * {\n    pointer-events: auto;\n  }\n"], ["\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  z-index: 2;\n  pointer-events: none;\n  * {\n    pointer-events: auto;\n  }\n"])));
var templateObject_1, templateObject_2, templateObject_3, templateObject_4, templateObject_5, templateObject_6, templateObject_7, templateObject_8, templateObject_9, templateObject_10, templateObject_11, templateObject_12, templateObject_13, templateObject_14, templateObject_15;

var isMobile = function () {
    // Detect if running on the browser:
    var isBrowser = typeof window !== 'undefined';
    if (isBrowser) {
        if (navigator && /Mobi|Android/i.test(navigator.userAgent)) {
            return true;
        }
        return false;
    }
    return false;
};

var initialContext = {
    isMobile: undefined,
    slidesArray: [],
    slideProps: undefined,
    navProps: undefined,
    autoplayButtonProps: undefined,
    dispatchProps: function () { return undefined; },
    generateNewSlideId: function () { return undefined; },
    removeSlideId: function () { return undefined; },
};
var useState = React.useState, useEffect = React.useEffect, useReducer = React.useReducer, useRef = React.useRef, useCallback = React.useCallback;
var SliderContext = React.createContext(initialContext);
var reducer = function (state, action) {
    var newState = __assign({}, state);
    switch (action.type) {
        case EActionTypes.SET_SLIDE_DATA: {
            var payload = action.payload;
            var slideNumber_1 = payload.slideNumber, navDescription = payload.navDescription;
            if (!newState.slidesArray.find(function (_a) {
                var number = _a.slideNumber;
                return number === slideNumber_1;
            })) {
                newState.slidesArray.push({
                    slideNumber: slideNumber_1,
                    navDescription: navDescription,
                });
                return newState;
            }
            return state;
        }
        case EActionTypes.SET_SLIDE_PROPS: {
            var payload = action.payload;
            var activeSlide = payload.activeSlide, isDoneSliding = payload.isDoneSliding, slidingAnimation = payload.slidingAnimation;
            newState.slideProps = {
                activeSlide: activeSlide,
                isDoneSliding: isDoneSliding,
                slidingAnimation: slidingAnimation,
            };
            return newState;
        }
        case EActionTypes.SET_NAVBAR_PROPS: {
            var payload = action.payload;
            var changeSlide = payload.changeSlide, activeSlide = payload.activeSlide, totalSlides = payload.totalSlides, sliderWidth = payload.sliderWidth;
            newState.navProps = {
                changeSlide: changeSlide,
                activeSlide: activeSlide,
                totalSlides: totalSlides,
                sliderWidth: sliderWidth,
            };
            return newState;
        }
        case EActionTypes.SET_AUTOPLAY_BUTTON_PROPS: {
            var payload = action.payload;
            var setIsManuallyPaused = payload.setIsManuallyPaused, autoplayHandlerTimeout = payload.autoplayHandlerTimeout, shouldAutoplay = payload.shouldAutoplay, autoplay = payload.autoplay;
            newState.autoplayButtonProps = {
                setIsManuallyPaused: setIsManuallyPaused,
                autoplayHandlerTimeout: autoplayHandlerTimeout,
                shouldAutoplay: shouldAutoplay,
                autoplay: autoplay,
            };
            return newState;
        }
        default:
            return state;
    }
};
var SliderContextProvider = function (props) {
    var mobile = props.isMobile, children = props.children;
    var slideUniqueIdsArrayRef = useRef([]);
    var slideUniqueIdsArray = slideUniqueIdsArrayRef.current;
    var generateNewSlideId = useCallback(function () {
        var newSlideId = slideUniqueIdsArray.length + 1;
        slideUniqueIdsArray.push(newSlideId);
        return newSlideId;
    }, [slideUniqueIdsArray]);
    var removeSlideId = useCallback(function (removedSlideId) {
        slideUniqueIdsArrayRef.current = slideUniqueIdsArray.filter(function (slideId) { return removedSlideId !== slideId; });
    }, [slideUniqueIdsArray]);
    var _a = (useReducer(reducer, {
        // Creating a new array to not affect other context values due to immutability.
        slidesArray: initialContext.slidesArray.slice(),
        slideProps: initialContext.slideProps,
        navProps: initialContext.navProps,
        autoplayButtonProps: initialContext.autoplayButtonProps,
    })), sliderContextProps = _a[0], dispatchProps = _a[1];
    var slideProps = sliderContextProps.slideProps, slidesArray = sliderContextProps.slidesArray, navProps = sliderContextProps.navProps, autoplayButtonProps = sliderContextProps.autoplayButtonProps;
    var _b = useState(mobile), isMobile$1 = _b[0], setIsMobile = _b[1];
    // When mounting, if `isMobile` is undefined, then set the default is mobile
    // based on the browser user agent.
    useEffect(function () {
        if (typeof isMobile$1 === 'undefined') {
            setIsMobile(isMobile());
        }
    }, [isMobile$1]);
    return (React.createElement(SliderContext.Provider, { value: {
            dispatchProps: dispatchProps,
            isMobile: isMobile$1,
            slidesArray: slidesArray,
            slideProps: slideProps,
            navProps: navProps,
            autoplayButtonProps: autoplayButtonProps,
            generateNewSlideId: generateNewSlideId,
            removeSlideId: removeSlideId,
        } }, children));
};

var Wrapper$1 = styled__default.div(templateObject_1$1 || (templateObject_1$1 = __makeTemplateObject(["\n  position: absolute;\n  z-index: 2;\n\n  &,\n  & * {\n    /* To disable double-tap zoom */\n    touch-action: manipulation;\n    pointer-events: none;\n  }\n\n  @media (max-width: 744px) {\n    & {\n      display: none;\n    }\n  }\n\n  .slide-button-container {\n    position: absolute;\n    display: block;\n    height: 100%;\n    width: 100%;\n    top: 0;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    box-shadow: none;\n    transition: all 400ms;\n    pointer-events: none;\n  }\n\n  /* pointer-events manipulation to allow clicking inner children AND children inside the slide-button-container. */\n  & *:not(.slide-button-container),\n  .slide-button-container * {\n    pointer-events: auto;\n  }\n\n  .slide-button-button-svg {\n    width: 100%;\n    /* Disabling button styling */\n    background: none;\n    color: inherit;\n    border: none;\n    padding: 0;\n    font: inherit;\n    cursor: pointer;\n    outline: inherit;\n  }\n\n  .slide-button-button-svg svg {\n    opacity: 0.5;\n    width: 60px;\n    height: 60px;\n    transition: all 200ms ease-in-out;\n    color: #FFF;\n  }\n\n  .slide-button-button-svg:hover svg {\n    opacity: 1;\n    width: 80px;\n    height: 80px;\n    color: #FFF;\n  }\n\n  /**\n  * --------------------------------------\n  * -------------HORIZONTAL---------------\n  * --------------------------------------\n  */\n\n  &.slide-button-horizontal {\n    top: 0;\n    width: 20%;\n    height: 100%;\n    min-width: 45px;\n    max-width: 120px;\n  }\n\n  &.slide-button-horizontal.slide-button-previous {\n    left: 0;\n  }\n\n  &.slide-button-horizontal.slide-button-next {\n    right: 0;\n  }\n\n  &.slide-button-horizontal .slide-button-container:hover {\n    --shadow: 100%;\n  }\n\n  &.slide-button-horizontal.slide-button-previous .slide-button-container {\n    left: 33%;\n    transform: translateX(-50%) scaleX(-1);\n    background: linear-gradient(\n      90deg,\n      var(--c1, transparent) 40%,\n      var(--c2, rgb(37, 37, 37, .05)) 60%,\n      var(--c3, rgb(37, 37, 37, 0.5)) 85%\n    ) var(--shadow, 0) / 200%;\n  }\n\n  &.slide-button-horizontal.slide-button-next .slide-button-container {\n    right: 33%;\n    transform: translateX(50%);\n    background: linear-gradient(\n      90deg,\n      var(--c1, transparent) 40%,\n      var(--c2, rgb(37, 37, 37, .05)) 60%,\n      var(--c3, rgb(37, 37, 37, 0.5)) 85%\n    ) var(--shadow, 0) / 200%;\n  }\n\n  /**\n  * ------------------------------------\n  * -------------VERTICAL---------------\n  * ------------------------------------\n  */\n\n  &.slide-button-vertical {\n    width: 100%;\n    height: 15%;\n    max-height: 200px;\n  }\n\n  &.slide-button-vertical.slide-button-previous {\n    top: 0;\n  }\n\n  &.slide-button-vertical.slide-button-next {\n    bottom: 0;\n  }\n\n  &.slide-button-vertical .slide-button-container:hover {\n    --shadow: 0;\n  }\n\n  &.slide-button-vertical.slide-button-previous .slide-button-container {\n    background: linear-gradient(to bottom,\n      rgb(37, 37, 37, 0.66) 0%,\n      rgb(37, 37, 37, 0.33) 50%,\n      rgb(37, 37, 37, 0.15) 75%,\n      rgb(37, 37, 37, 0.01) 100%) no-repeat 0px var(--shadow, -200px);\n  }\n\n  &.slide-button-vertical.slide-button-previous svg {\n    transform: rotate(-90deg);\n  }\n\n  &.slide-button-vertical.slide-button-next .slide-button-container {\n    background: linear-gradient(to top,\n      rgb(37, 37, 37, 0.66) 0%,\n      rgb(37, 37, 37, 0.33) 50%,\n      rgb(37, 37, 37, 0.15) 75%,\n      rgb(37, 37, 37, 0.01) 100%) no-repeat 0px var(--shadow, 200px);\n  }\n\n  &.slide-button-vertical.slide-button-next svg {\n    transform: rotate(90deg);\n  }\n"], ["\n  position: absolute;\n  z-index: 2;\n\n  &,\n  & * {\n    /* To disable double-tap zoom */\n    touch-action: manipulation;\n    pointer-events: none;\n  }\n\n  @media (max-width: 744px) {\n    & {\n      display: none;\n    }\n  }\n\n  .slide-button-container {\n    position: absolute;\n    display: block;\n    height: 100%;\n    width: 100%;\n    top: 0;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    box-shadow: none;\n    transition: all 400ms;\n    pointer-events: none;\n  }\n\n  /* pointer-events manipulation to allow clicking inner children AND children inside the slide-button-container. */\n  & *:not(.slide-button-container),\n  .slide-button-container * {\n    pointer-events: auto;\n  }\n\n  .slide-button-button-svg {\n    width: 100%;\n    /* Disabling button styling */\n    background: none;\n    color: inherit;\n    border: none;\n    padding: 0;\n    font: inherit;\n    cursor: pointer;\n    outline: inherit;\n  }\n\n  .slide-button-button-svg svg {\n    opacity: 0.5;\n    width: 60px;\n    height: 60px;\n    transition: all 200ms ease-in-out;\n    color: #FFF;\n  }\n\n  .slide-button-button-svg:hover svg {\n    opacity: 1;\n    width: 80px;\n    height: 80px;\n    color: #FFF;\n  }\n\n  /**\n  * --------------------------------------\n  * -------------HORIZONTAL---------------\n  * --------------------------------------\n  */\n\n  &.slide-button-horizontal {\n    top: 0;\n    width: 20%;\n    height: 100%;\n    min-width: 45px;\n    max-width: 120px;\n  }\n\n  &.slide-button-horizontal.slide-button-previous {\n    left: 0;\n  }\n\n  &.slide-button-horizontal.slide-button-next {\n    right: 0;\n  }\n\n  &.slide-button-horizontal .slide-button-container:hover {\n    --shadow: 100%;\n  }\n\n  &.slide-button-horizontal.slide-button-previous .slide-button-container {\n    left: 33%;\n    transform: translateX(-50%) scaleX(-1);\n    background: linear-gradient(\n      90deg,\n      var(--c1, transparent) 40%,\n      var(--c2, rgb(37, 37, 37, .05)) 60%,\n      var(--c3, rgb(37, 37, 37, 0.5)) 85%\n    ) var(--shadow, 0) / 200%;\n  }\n\n  &.slide-button-horizontal.slide-button-next .slide-button-container {\n    right: 33%;\n    transform: translateX(50%);\n    background: linear-gradient(\n      90deg,\n      var(--c1, transparent) 40%,\n      var(--c2, rgb(37, 37, 37, .05)) 60%,\n      var(--c3, rgb(37, 37, 37, 0.5)) 85%\n    ) var(--shadow, 0) / 200%;\n  }\n\n  /**\n  * ------------------------------------\n  * -------------VERTICAL---------------\n  * ------------------------------------\n  */\n\n  &.slide-button-vertical {\n    width: 100%;\n    height: 15%;\n    max-height: 200px;\n  }\n\n  &.slide-button-vertical.slide-button-previous {\n    top: 0;\n  }\n\n  &.slide-button-vertical.slide-button-next {\n    bottom: 0;\n  }\n\n  &.slide-button-vertical .slide-button-container:hover {\n    --shadow: 0;\n  }\n\n  &.slide-button-vertical.slide-button-previous .slide-button-container {\n    background: linear-gradient(to bottom,\n      rgb(37, 37, 37, 0.66) 0%,\n      rgb(37, 37, 37, 0.33) 50%,\n      rgb(37, 37, 37, 0.15) 75%,\n      rgb(37, 37, 37, 0.01) 100%) no-repeat 0px var(--shadow, -200px);\n  }\n\n  &.slide-button-vertical.slide-button-previous svg {\n    transform: rotate(-90deg);\n  }\n\n  &.slide-button-vertical.slide-button-next .slide-button-container {\n    background: linear-gradient(to top,\n      rgb(37, 37, 37, 0.66) 0%,\n      rgb(37, 37, 37, 0.33) 50%,\n      rgb(37, 37, 37, 0.15) 75%,\n      rgb(37, 37, 37, 0.01) 100%) no-repeat 0px var(--shadow, 200px);\n  }\n\n  &.slide-button-vertical.slide-button-next svg {\n    transform: rotate(90deg);\n  }\n"])));
var templateObject_1$1;

/* tslint:disable max-line-length */
var useContext = React.useContext, memo = React.memo;
var ButtonSVG = function () { return (React.createElement("svg", { width: "60px", height: "60px", strokeWidth: "5", version: "1.1", viewBox: "0 0 129 129" },
    React.createElement("g", { fill: "currentColor" },
        React.createElement("path", { d: "m40.4,121.3c-0.8,0.8-1.8,1.2-2.9,1.2s-2.1-0.4-2.9-1.2c-1.6-1.6-1.6-4.2 0-5.8l51-51-51-51c-1.6-1.6-1.6-4.2 0-5.8 1.6-1.6 4.2-1.6 5.8,0l53.9,53.9c1.6,1.6 1.6,4.2 0,5.8l-53.9,53.9z" })))); };
var Buttons = function (props) {
    var isMobile = useContext(SliderContext).isMobile;
    if (isMobile)
        return null;
    return (React.createElement(React.Fragment, null,
        React.createElement(Wrapper$1, { className: [
                'slide-button-previous',
                props.isHorizontal ? 'slide-button-horizontal' : 'slide-button-vertical',
            ].join(' ') },
            React.createElement("div", { className: "slide-button-container" },
                React.createElement("button", { onClick: props.previousSlide, className: "slide-button-button-svg" },
                    React.createElement(ButtonSVG, null)))),
        React.createElement(Wrapper$1, { className: [
                'slide-button-next',
                props.isHorizontal ? 'slide-button-horizontal' : 'slide-button-vertical',
            ].join(' ') },
            React.createElement("div", { className: "slide-button-container" },
                React.createElement("button", { onClick: props.nextSlide, className: "slide-button-button-svg" },
                    React.createElement(ButtonSVG, null))))));
};
var Buttons$1 = memo(Buttons);

var useContext$1 = React.useContext, useEffect$1 = React.useEffect, useState$1 = React.useState, useLayoutEffect = React.useLayoutEffect, memo$1 = React.memo;
var HeroSlider = memo$1(function (props) {
    var onBeforeChange = props.onBeforeChange, onAfterChange = props.onAfterChange, onChange = props.onChange;
    /**
     * Slider reference object to calculate its dimensions.
     */
    var sliderRef = React.useRef(null);
    var _a = useState$1({}), sliderDimensions = _a[0], setSliderDimensions = _a[1];
    /**
     * Initial settings for the carousel.
     */
    var initialSettings = React.useMemo(function () { return (__assign({ 
        // Dependants
        initialSlidingAnimation: props.slidingAnimation || EAnimations$1.RIGHT_TO_LEFT, slidingAnimation: setInitialSlidingAnimation(props.slidingAnimation), sliderOrientation: props.orientation || EOrientation.HORIZONTAL, 
        // Defaults
        slidingDuration: 500, slidingDelay: 200, sliderColor: 'inherit', sliderFadeInDuration: 100, navbarFadeInDuration: 1000, navbarFadeInDelay: 500, isSmartSliding: true, shouldDisplayButtons: true, shouldAutoplay: true, shouldSlideOnArrowKeypress: false, autoplayDuration: 8000, autoplayHandlerTimeout: 1000, width: '100%', height: '100%' }, props.settings)); }, [props.settings, props.orientation, props.slidingAnimation]);
    var _b = useState$1(initialSettings), sliderSettings = _b[0], setSettings = _b[1];
    var settings = React.useMemo(function () { return (__assign({}, sliderSettings, props.settings)); }, [sliderSettings, props.settings]);
    var initialTouchState = {
        initialX: undefined,
        initialY: undefined,
        currentX: undefined,
        currentY: undefined,
        finalX: undefined,
        finalY: undefined,
    };
    var _c = useState$1(initialTouchState), touchState = _c[0], setTouchState = _c[1];
    var _d = useState$1(props.initialSlide || 1), activeSlide = _d[0], setActiveSlide = _d[1];
    var _e = useState$1(true), isDoneSliding = _e[0], setIsDoneSliding = _e[1];
    /**
     * `activeSlideWatcher` `isDoneSlidingWatcher` are a mutable
     * objects that will persist for the full
     * lifetime of the component.
     *  - `isDoneSlidingWatcher` will serve as a pointer in case
     *    a `nextSlide` event is called from outside.
     *  - `activeSlideWatcher` serves as a pointer to the `activeSlide`
     *    so that the auto play instance won't be out of sync with the
     *    current slide. It is updated during the `useEffects` subscribed
     *    to the `activeSlide` state whenever the user changes slide.
     */
    var isDoneSlidingWatcher = React.useRef(true);
    var activeSlideWatcher = React.useRef(activeSlide);
    var _f = useState$1(), delayTimeout = _f[0], setDelayTimeout = _f[1];
    var _g = useState$1(), slidingTimeout = _g[0], setSlidingTimeout = _g[1];
    /**
     * `slidingTimeoutDuration` is the total time it takes for
     * the transition of each slide. It's the sum of the duration
     * of the slide, plus any delay of the animation.
     */
    var slidingTimeoutDuration = ((settings.slidingDuration + settings.slidingDelay) * 1.1); // 110% safety factor.
    var setSlidingAnimation = React.useCallback(function (newAnimation) {
        setSettings(__assign({}, settings, { slidingAnimation: newAnimation }));
    }, [settings]);
    /**
     * `onSlidingHandler` sets `isDoneSliding` as false when executed
     * and triggers a `setTimeout` that will set `isDoneSliding` as true
     * after the time it takes for the slide to change passes.
     * Saves the timeout ID to `slidingTimeout`.
     * The `onChange` and `onAfterChange` events are executed here.
     */
    var onSlidingHandler = React.useCallback(function (nextSlide) {
        setIsDoneSliding(false);
        // Only save the delay timeout if `onChange` exists.
        if (onChange) {
            var delayTimeoutId = setTimeout(function () {
                onChange && onChange(nextSlide);
            }, settings.slidingDelay);
            setDelayTimeout(delayTimeoutId);
        }
        // Sliding timeout ID's for the transitions.
        var slidingTimeoutId = setTimeout(function () {
            setIsDoneSliding(true);
            if (onAfterChange) {
                onAfterChange(nextSlide);
            }
        }, slidingTimeoutDuration);
        // Saving the timeout ID's in case clearing them is needed.
        setSlidingTimeout(slidingTimeoutId);
    }, [onChange, onAfterChange, settings.slidingDelay, slidingTimeoutDuration]);
    /**
     * `changeSlide` sets a new slide then executes `onSlidingHandler` to handle
     * the smooth transition and set `isDoneSlidingWatcher.current` (like a pointer)
     * as true. While `isDoneSliding` is true, no the slides won't change.
     * The `onBeforeChange` event is executed here.
     */
    var changeSlide = React.useCallback(function (nextSlide) {
        if (isDoneSlidingWatcher.current) {
            if (onBeforeChange) {
                onBeforeChange(activeSlideWatcher.current, nextSlide);
            }
            setActiveSlide(nextSlide);
            onSlidingHandler(nextSlide);
        }
    }, [onSlidingHandler, onBeforeChange]);
    /**
     * `smartAnimations` decides which animation to do next depending on the chosen
     * animation set by the programmer, the current and next slides, and if
     * `settings.initialSlidingAnimation` is `true`.
     */
    var smartAnimations = React.useCallback(function (nextSlide) {
        switch (settings.initialSlidingAnimation) {
            case EAnimations$1.TOP_TO_BOTTOM:
            case EAnimations$1.BOTTOM_TO_TOP:
                if (nextSlide > activeSlideWatcher.current) {
                    setSlidingAnimation(EAnimations$1.BOTTOM_TO_TOP);
                }
                else {
                    setSlidingAnimation(EAnimations$1.TOP_TO_BOTTOM);
                }
                break;
            case EAnimations$1.RIGHT_TO_LEFT:
            case EAnimations$1.LEFT_TO_RIGHT:
                if (nextSlide > activeSlideWatcher.current) {
                    setSlidingAnimation(EAnimations$1.RIGHT_TO_LEFT);
                }
                else {
                    setSlidingAnimation(EAnimations$1.LEFT_TO_RIGHT);
                }
        }
    }, [setSlidingAnimation, settings.initialSlidingAnimation]);
    var _h = useState$1(), autoplayHandlerTimeout = _h[0], setAutoplayHandlerTimeout = _h[1];
    /**
     * Autoplay manually paused state handled by the autoplay buttons.
     */
    var _j = useState$1(false), isManuallyPaused = _j[0], setIsManuallyPaused = _j[1];
    var _k = useContext$1(SliderContext), dispatchProps = _k.dispatchProps, slidesArray = _k.slidesArray;
    /**
     * Calculates the next slide based on the current slide (`activeSlide` by default)
     * based on the total amount of slides.
     */
    var getNextSlide = React.useCallback(function (currentSlide) {
        if (currentSlide === void 0) { currentSlide = activeSlide; }
        var totalSlides = slidesArray.length;
        var nextSlide;
        /**
         * If **not** at the last slide, then add one. Otherwise set the next slide back to 1.
         */
        if (currentSlide <= (totalSlides - 1)) {
            nextSlide = currentSlide + 1;
        }
        else {
            nextSlide = 1;
        }
        return nextSlide;
    }, [activeSlide, slidesArray.length]);
    /**
     * `autoplay` is the callback sent to the autoplay instance.
     */
    var autoplay = React.useCallback(function () {
        var nextSlide = getNextSlide(activeSlideWatcher.current);
        if (settings.isSmartSliding) {
            smartAnimations(nextSlide);
        }
        changeSlide(getNextSlide(activeSlideWatcher.current));
    }, [changeSlide, getNextSlide, settings.isSmartSliding, smartAnimations]);
    var autoplayInstanceRef = React.useRef((React.useMemo(function () {
        return new IntervalTimer(autoplay, settings.autoplayDuration + slidingTimeoutDuration);
    }, [autoplay, settings.autoplayDuration, slidingTimeoutDuration])));
    var autoplayInstance = autoplayInstanceRef.current;
    /**
     * Handles slide changes. If the user interacts with the slide, the timer of the
     * autoplay instance is reset and the next animation is algo decided depending on
     * the parameter (which is a slide number) **so long as it has not been manually paused**.
     */
    var changeSlideHandler = React.useCallback(function (nextSlide, animationParam) {
        clearTimeout(autoplayHandlerTimeout && +autoplayHandlerTimeout);
        if (settings.isSmartSliding) {
            smartAnimations(animationParam || nextSlide);
        }
        changeSlide(nextSlide);
    }, [
        autoplayHandlerTimeout,
        changeSlide,
        settings.isSmartSliding,
        smartAnimations,
    ]);
    /**
     * Changes the active slide to the next one.
     */
    var setNextSlide = function () {
        /**
         * Forces the animation to be set as the same always, it will slide from right to left,
         * or from top to bottom so long as the initial animation is not fade.
         */
        var animationParam = slidesArray.length + 1;
        changeSlideHandler(getNextSlide(activeSlideWatcher.current), animationParam);
    };
    /**
     * Calculates the previous slide similar to `getNextSlide`.
     */
    var getPreviousSlide = function (currentSlide) {
        if (currentSlide === void 0) { currentSlide = activeSlide; }
        var totalSlides = slidesArray.length;
        var nextSlide;
        /**
         * If **not** at the first slide, then add one. Otherwise set the next slide to the
         * last one.
         */
        if (currentSlide > 1) {
            nextSlide = currentSlide - 1;
        }
        else {
            nextSlide = totalSlides;
        }
        return nextSlide;
    };
    /**
     * Changes the active slide to the previous one.
     */
    var setPreviousSlide = function () {
        /**
         * Similar to `setNextSlide`, it will always slide from left to right,
         * or from bottom to top unless the fade animation is active.
         */
        var animationParam = 1;
        changeSlideHandler(getPreviousSlide(activeSlideWatcher.current), animationParam);
    };
    /**
     * `autoplayHandler` will pause the autoplay timer whenever the mouse
     * moves over the slider. If the mouse stops moving the autoplay will
     * resume. If not, `onMouseMoveCaptureHandler` will also clear the
     * `autoplayInstance`resume `setTimeout` callbacks if any exist, so
     * that the slides won't move if the user is interacting with the
     * slider component.
     */
    var autoplayHandler = function () {
        var isPausedOrIdle = autoplayInstance.state === EState.IDLE || isManuallyPaused;
        if (isPausedOrIdle)
            return; // If the slider has been paused, do nothing.
        autoplayInstance.pause();
        if (autoplayHandlerTimeout)
            clearTimeout(autoplayHandlerTimeout);
        var autoplayHandlerTimeoutId = setTimeout(function () {
            autoplayInstance.resume();
        }, settings.autoplayHandlerTimeout);
        setAutoplayHandlerTimeout(autoplayHandlerTimeoutId);
    };
    /**
     * `onMouseMoveCaptureHandler` executes `autoplayHandler` whenever the user moves the mouse
     * over the slider.
     */
    var onMouseMoveCaptureHandler = function () {
        if (settings.shouldAutoplay) {
            autoplayHandler();
        }
    };
    var setSliderDimensionsHandler = function () {
        var sliderDimensions = {
            width: sliderRef.current ? sliderRef.current.clientWidth : undefined,
            height: sliderRef.current ? sliderRef.current.clientHeight : undefined,
        };
        setSliderDimensions(sliderDimensions);
    };
    /**
     * `onTouchStartHandler` sets the initial coordinates of the touch event.
     */
    var onTouchStartHandler = function (event) {
        var initialX = event.touches[0].clientX;
        var initialY = event.touches[0].clientY;
        setTouchState(__assign({}, touchState, { initialX: initialX,
            initialY: initialY }));
    };
    /**
     * `onTouchMoveHandler` sets the current coordinates of the touch event to the state.
     */
    var onTouchMoveHandler = function (event) {
        var currentX = event.touches[0].clientX;
        var currentY = event.touches[0].clientY;
        setTouchState(__assign({}, touchState, { currentX: currentX,
            currentY: currentY }));
    };
    /**
     * `onTouchEndHandler` determines in which direction **and** sense (vector) the user is sliding.
     * Animations are then set accordingly depending on which direction the user is dragging and
     * the slide is changed. Finally the touch state is set back to the initial state, where
     * everything is undefined.
     */
    var onTouchEndHandler = function () {
        var diffX = touchState && Number(touchState.initialX) - Number(touchState.currentX);
        var diffY = touchState && Number(touchState.initialY) - Number(touchState.currentY);
        var thresholdToSlide = 50;
        var isSlidingHorizontally = Math.abs(diffX) > Math.abs(diffY);
        var isSliderSetHorizontally = settings.sliderOrientation === EOrientation.HORIZONTAL;
        var isSliderVertically = settings.sliderOrientation === EOrientation.VERTICAL;
        if (isSlidingHorizontally &&
            isSliderSetHorizontally &&
            Math.abs(diffX) >= thresholdToSlide) {
            // Sliding horizontally.
            if (diffX > 0) {
                // Swiped left.
                setNextSlide();
            }
            else {
                // Swiped right.
                setPreviousSlide();
            }
        }
        else if (isSliderVertically &&
            Math.abs(diffY) >= thresholdToSlide) {
            // Sliding vertically.
            if (diffY > 0) {
                // Swiped up.
                setNextSlide();
            }
            else {
                // Swiped down.
                setPreviousSlide();
            }
        }
        setTouchState(initialTouchState);
    };
    var onArrowKeypressHandler = function (e) {
        var isHorizontal = settings.sliderOrientation === EOrientation.HORIZONTAL;
        switch (true) {
            // Left keypress.
            case isHorizontal && e.keyCode === 37:
                setPreviousSlide();
                break;
            // Right keypress.
            case isHorizontal && e.keyCode === 39:
                setNextSlide();
                break;
            // Up keypress.
            case !isHorizontal && e.keyCode === 38:
                setPreviousSlide();
                break;
            // Down keypress.
            case !isHorizontal && e.keyCode === 40:
                setNextSlide();
                break;
            default: // Do nothing.
        }
    };
    /**
     * Update the respective watchers' current values.
     */
    useEffect$1(function () {
        activeSlideWatcher.current = activeSlide;
    }, [activeSlide]);
    useEffect$1(function () {
        isDoneSlidingWatcher.current = isDoneSliding;
    }, [isDoneSliding]);
    /**
     * After mounting, akin to `componentDidMount`.
     */
    useEffect$1(function () {
        activeSlideWatcher.current = activeSlide;
        /**
         * Sets up the `nextSlide` and `previousSlide` reference object if they exist.
         */
        if (props.nextSlide) {
            props.nextSlide.current = setNextSlide;
        }
        if (props.previousSlide) {
            props.previousSlide.current = setPreviousSlide;
        }
        /**
         * Calculates the initial dimensions of the slider and adds event listener.
         */
        setSliderDimensionsHandler();
        window.addEventListener('resize', setSliderDimensions);
        if (settings.shouldSlideOnArrowKeypress) {
            window.addEventListener('keydown', onArrowKeypressHandler);
        }
        /**
         * Clearing any existing timeouts to avoid memory leaks, and clear event listener.
         */
        return function () {
            clearTimeout(delayTimeout && +delayTimeout);
            clearTimeout(slidingTimeout && +slidingTimeout);
            clearTimeout(autoplayHandlerTimeout && +autoplayHandlerTimeout);
            autoplayInstance.stop();
            window.removeEventListener('resize', setSliderDimensions);
            if (settings.shouldSlideOnArrowKeypress) {
                window.removeEventListener('keydown', onArrowKeypressHandler);
            }
        };
    }, 
    // eslint-disable-next-line
    []);
    var styledComponentsTheme = React.useMemo(function () {
        return {
            // Default: 800ms
            slidingDuration: settings.slidingDuration + "ms",
            // Default: 0ms
            slidingDelay: settings.slidingDelay + "ms",
            // Default: HeroSliderModuleCss.Sliding_Left_To_Right.
            slidingAnimation: "" + settings.slidingAnimation,
            // Default: 800ms
            slideTransitionDelay: settings.slidingDuration + settings.slidingDelay + "ms",
            sliderWidth: sliderDimensions.width ? sliderDimensions.width + "px" : undefined,
            sliderHeight: sliderDimensions.height ? sliderDimensions.height + "px" : undefined,
            sliderColor: settings.sliderColor,
            sliderFadeInDuration: settings.sliderFadeInDuration + "ms",
            navFadeInDuration: settings.navbarFadeInDuration + "ms",
            navFadeInDelay: settings.navbarFadeInDelay + "ms",
            navBackgroundColor: props.navbarSettings ? props.navbarSettings.color : undefined,
            navActiveColor: props.navbarSettings ? props.navbarSettings.activeColor : undefined,
            // Default: 800ms
            maskDuration: settings.slidingDuration + settings.slidingDelay + "ms",
        };
    }, [settings, props.navbarSettings, sliderDimensions.height, sliderDimensions.width]);
    var _l = useState$1(), inViewTimeoutHandler = _l[0], setInViewTimeoutHandler = _l[1];
    /**
     * Subscribe to changes in `inView`.
     * If the slider goes out of the viewport, then pause the slider autoplay
     * instance if it's running. If it comes back into viewport, resume the
     * autoplay instance.
     */
    useLayoutEffect(function () {
        if (settings.shouldAutoplay) {
            console.log('autoplayInstance.state', autoplayInstance.state);
            console.log('EState', EState[autoplayInstance.state]);
            console.log('props.inView', props.inView);
            if (inViewTimeoutHandler)
                clearTimeout(inViewTimeoutHandler);
            switch (true) {
                case isManuallyPaused:
                    break;
                // When not in view, stop the autoplay.
                case !props.inView:
                    console.log('STOPPPING');
                    autoplayInstance.stop();
                    setInViewTimeoutHandler(undefined);
                    break;
                // When in view and idle, start it.
                case autoplayInstance.state === EState.IDLE && props.inView: {
                    console.log('STARTING TIMEOUT');
                    var timeoutId = setTimeout(function () {
                        console.log('STARTING');
                        autoplayInstance.start();
                    }, settings.autoplayHandlerTimeout);
                    setInViewTimeoutHandler(timeoutId);
                    break;
                }
                // When in view and paused, resume it.
                case autoplayInstance.state === EState.PAUSED && props.inView: {
                    console.log('RESUMING TIMEOUT');
                    var timeoutId = setTimeout(function () {
                        console.log('RESUMING');
                        autoplayInstance.resume();
                    }, settings.autoplayHandlerTimeout);
                    setInViewTimeoutHandler(timeoutId);
                    break;
                }
            }
        }
        return function () {
            if (inViewTimeoutHandler)
                clearTimeout(inViewTimeoutHandler);
        };
    }, 
    // react-hooks/exhaustive-deps is disabled because we wan't to keep
    // inViewTimeoutHandler out of the effects to avoid infinite loops.
    // eslint-disable-next-line
    [
        autoplayInstance,
        isManuallyPaused, props.inView,
        settings.shouldAutoplay,
        settings.autoplayHandlerTimeout,
    ]);
    // Setting slides props for the contexts.
    useEffect$1(function () {
        if (dispatchProps && typeof dispatchProps === 'function') {
            dispatchProps({
                type: EActionTypes.SET_SLIDE_PROPS,
                payload: {
                    activeSlide: activeSlide,
                    isDoneSliding: isDoneSliding,
                    slidingAnimation: settings.slidingAnimation,
                },
            });
        }
    }, [dispatchProps, activeSlide, isDoneSliding, settings.slidingAnimation]);
    // Setting navbars props for the contexts.
    useEffect$1(function () {
        if (dispatchProps && typeof dispatchProps === 'function') {
            dispatchProps({
                type: EActionTypes.SET_NAVBAR_PROPS,
                payload: {
                    activeSlide: activeSlide,
                    changeSlide: changeSlideHandler,
                    totalSlides: slidesArray.length,
                    sliderWidth: sliderDimensions.width || 0,
                },
            });
        }
    }, [
        changeSlideHandler,
        activeSlide,
        dispatchProps,
        sliderDimensions.width,
        slidesArray.length,
    ]);
    // Setting autoplay buttons props props for the contexts.
    useEffect$1(function () {
        if (dispatchProps && typeof dispatchProps === 'function') {
            dispatchProps({
                type: EActionTypes.SET_AUTOPLAY_BUTTON_PROPS,
                payload: {
                    setIsManuallyPaused: setIsManuallyPaused,
                    autoplayHandlerTimeout: autoplayHandlerTimeout,
                    shouldAutoplay: settings.shouldAutoplay,
                    autoplay: autoplayInstanceRef,
                },
            });
        }
    }, [
        dispatchProps,
        setIsManuallyPaused,
        settings.shouldAutoplay,
        autoplayHandlerTimeout,
        autoplayInstanceRef,
    ]);
    useEffect$1(function () {
        console.log('isDoneSliding', isDoneSliding);
        if (isDoneSliding) {
            if (settings.shouldAutoplay && !isManuallyPaused) {
                console.log('RESETTING');
                autoplayInstance.reset();
            }
        }
    }, [
        isDoneSliding,
        autoplayInstance,
        isManuallyPaused,
        settings.shouldAutoplay,
    ]);
    return (React.createElement(styled.ThemeProvider, { theme: styledComponentsTheme },
        React.createElement(Wrapper, { ref: sliderRef, onTouchStart: onTouchStartHandler, onTouchMove: onTouchMoveHandler, onTouchEnd: onTouchEndHandler, style: __assign({}, props.style, { width: settings.width, height: settings.height }), onMouseMoveCapture: onMouseMoveCaptureHandler },
            props.children,
            settings.shouldDisplayButtons && (React.createElement(Buttons$1, { isHorizontal: settings.sliderOrientation === EOrientation.HORIZONTAL, previousSlide: setPreviousSlide, nextSlide: setNextSlide })))));
});
var WithProvider = memo$1(function (props) {
    var isMobile = props.isMobile, rest = __rest(props, ["isMobile"]);
    var _a = useInView({
        /* Optional options */
        threshold: 0,
    }), ref = _a[0], inView = _a[1];
    return (React.createElement(SliderContextProvider, { isMobile: isMobile },
        React.createElement("div", { className: "rm-hero-slider", ref: ref },
            React.createElement(HeroSlider, __assign({ inView: inView }, rest)))));
});
var Slider = memo$1(WithProvider);

var memo$2 = React.memo;
var ExtendedThemeProvider = function (props) {
    var theme = props.theme, extendedTheme = props.extendedTheme, children = props.children;
    return (React.createElement(styled.ThemeProvider, { theme: __assign({}, theme, extendedTheme) }, children));
};
var ExtendedThemeProvider$1 = memo$2(styled.withTheme(ExtendedThemeProvider));

var slidingDelay$1 = function (delay) {
    if (delay === void 0) { delay = 200; }
    return styled.css(templateObject_1$2 || (templateObject_1$2 = __makeTemplateObject(["", ""], ["", ""])), function (_a) {
        var theme = _a.theme;
        return theme.slidingDelay || delay + "ms";
    });
};
var slideTransitionDelay = styled.css(templateObject_2$1 || (templateObject_2$1 = __makeTemplateObject(["", ""], ["", ""])), function (_a) {
    var theme = _a.theme;
    return theme.slideTransitionDelay || '800ms';
});
var slideCss = styled.css(templateObject_3$1 || (templateObject_3$1 = __makeTemplateObject(["\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  transform: translate3d(0, 0, 0);\n  overflow: hidden;\n"], ["\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  transform: translate3d(0, 0, 0);\n  overflow: hidden;\n"])));
var activeCss = styled.css(templateObject_4$1 || (templateObject_4$1 = __makeTemplateObject(["\n  z-index: 2; /* NOTE: It is imperative for z-index to be here, do not remove. */\n  transform: translate3d(0, 0, 0);\n  transition-delay: ", ";\n"], ["\n  z-index: 2; /* NOTE: It is imperative for z-index to be here, do not remove. */\n  transform: translate3d(0, 0, 0);\n  transition-delay: ", ";\n"])), slidingDelay$1());
var inactiveCss = styled.css(templateObject_5$1 || (templateObject_5$1 = __makeTemplateObject(["\n  user-select: none;\n  z-index: 1;\n  transform: translate3d(100%, 0, 0);\n  transition-delay: ", ";\n"], ["\n  user-select: none;\n  z-index: 1;\n  transform: translate3d(100%, 0, 0);\n  transition-delay: ", ";\n"])), slideTransitionDelay);
var setAnimation = styled.css(templateObject_6$1 || (templateObject_6$1 = __makeTemplateObject(["", ""], ["",
    ""])), function (_a) {
    var theme = _a.theme;
    var slidingAnimation = theme.slidingAnimation;
    switch (slidingAnimation) {
        // Top to bottom.
        case EAnimations.TOP_TO_BOTTOM:
            return animations.slideTopToBottom;
        // Bottom to top.
        case EAnimations.BOTTOM_TO_TOP:
            return animations.slideBottomToTop;
        // Left to right.
        case EAnimations.LEFT_TO_RIGHT:
            return animations.slideLeftToRight;
        // Right to left, by default.
        case EAnimations.RIGHT_TO_LEFT:
            return animations.slideRightToLeft;
        case EAnimations.FADE:
        default:
            return animations.slideFadeIn;
    }
});
var StyledSlide = styled__default.div(templateObject_8$1 || (templateObject_8$1 = __makeTemplateObject(["\n  ", ";\n  /* property name | duration | timing function | delay */\n  transition: transform 0ms ease-in-out ", ";\n  ", "\n  .slide-wrapper {\n    position: relative;\n    width: 100%;\n    height: 100%;\n    overflow: hidden;\n  }\n\n  .slide-container  {\n    ", ";\n  }\n\n  .slide-active {\n    ", ";\n  }\n\n  .slide-container {\n    backface-visibility: hidden;\n    /* property name | duration | timing function | delay */\n    transition: all 300ms ease-in-out ", ";\n  }\n\n  .slide-container:not(.slide-active) {\n    z-index: 1;\n    opacity: 0;\n    /* property name | duration | timing function | delay */\n    transition: all 200ms ease-in-out ", ";\n  }\n"], ["\n  ", ";\n  /* property name | duration | timing function | delay */\n  transition: transform 0ms ease-in-out ", ";\n  ",
    "\n  .slide-wrapper {\n    position: relative;\n    width: 100%;\n    height: 100%;\n    overflow: hidden;\n  }\n\n  .slide-container  {\n    ", ";\n  }\n\n  .slide-active {\n    ", ";\n  }\n\n  .slide-container {\n    backface-visibility: hidden;\n    /* property name | duration | timing function | delay */\n    transition: all 300ms ease-in-out ", ";\n  }\n\n  .slide-container:not(.slide-active) {\n    z-index: 1;\n    opacity: 0;\n    /* property name | duration | timing function | delay */\n    transition: all 200ms ease-in-out ", ";\n  }\n"])), slideCss, slidingDelay$1(0), function (_a) {
    var isActive = _a.isActive, isDoneSliding = _a.isDoneSliding;
    return styled.css(templateObject_7$1 || (templateObject_7$1 = __makeTemplateObject(["\n      ", ";\n      ", ";\n  "], ["\n      ", ";\n      ", ";\n  "])), isActive ? activeCss : inactiveCss, (isActive && !isDoneSliding) && setAnimation);
}, slideCss, activeCss, slidingDelay$1(), slidingDelay$1());
var templateObject_1$2, templateObject_2$1, templateObject_3$1, templateObject_4$1, templateObject_5$1, templateObject_6$1, templateObject_7$1, templateObject_8$1;

function unwrapExports (x) {
	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var event = createCommonjsModule(function (module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.on = on;
exports.off = off;
function on(el, eventName, callback, opts) {
  opts = opts || false;
  if (el.addEventListener) {
    el.addEventListener(eventName, callback, opts);
  } else if (el.attachEvent) {
    el.attachEvent("on" + eventName, function (e) {
      callback.call(el, e || window.event);
    });
  }
}

function off(el, eventName, callback, opts) {
  opts = opts || false;
  if (el.removeEventListener) {
    el.removeEventListener(eventName, callback, opts);
  } else if (el.detachEvent) {
    el.detachEvent("on" + eventName, callback);
  }
}
});

unwrapExports(event);
var event_1 = event.on;
var event_2 = event.off;

var scrollParent = createCommonjsModule(function (module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

/**
 * @fileOverview Find scroll parent
 */

exports.default = function (node) {
  if (!(node instanceof HTMLElement)) {
    return document.documentElement;
  }

  var excludeStaticParent = node.style.position === 'absolute';
  var overflowRegex = /(scroll|auto)/;
  var parent = node;

  while (parent) {
    if (!parent.parentNode) {
      return node.ownerDocument || document.documentElement;
    }

    var style = window.getComputedStyle(parent);
    var position = style.position;
    var overflow = style.overflow;
    var overflowX = style['overflow-x'];
    var overflowY = style['overflow-y'];

    if (position === 'static' && excludeStaticParent) {
      parent = parent.parentNode;
      continue;
    }

    if (overflowRegex.test(overflow) && overflowRegex.test(overflowX) && overflowRegex.test(overflowY)) {
      return parent;
    }

    parent = parent.parentNode;
  }

  return node.ownerDocument || node.documentElement || document.documentElement;
};
});

unwrapExports(scrollParent);

var debounce_1 = createCommonjsModule(function (module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = debounce;
function debounce(func, wait, immediate) {
  var timeout = void 0;
  var args = void 0;
  var context = void 0;
  var timestamp = void 0;
  var result = void 0;

  var later = function later() {
    var last = +new Date() - timestamp;

    if (last < wait && last >= 0) {
      timeout = setTimeout(later, wait - last);
    } else {
      timeout = null;
      if (!immediate) {
        result = func.apply(context, args);
        if (!timeout) {
          context = null;
          args = null;
        }
      }
    }
  };

  return function debounced() {
    context = this;
    args = arguments;
    timestamp = +new Date();

    var callNow = immediate && !timeout;
    if (!timeout) {
      timeout = setTimeout(later, wait);
    }

    if (callNow) {
      result = func.apply(context, args);
      context = null;
      args = null;
    }

    return result;
  };
}
});

unwrapExports(debounce_1);

var throttle_1 = createCommonjsModule(function (module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = throttle;
/*eslint-disable */
function throttle(fn, threshhold, scope) {
  threshhold || (threshhold = 250);
  var last, deferTimer;
  return function () {
    var context = scope || this;

    var now = +new Date(),
        args = arguments;
    if (last && now < last + threshhold) {
      // hold on to it
      clearTimeout(deferTimer);
      deferTimer = setTimeout(function () {
        last = now;
        fn.apply(context, args);
      }, threshhold);
    } else {
      last = now;
      fn.apply(context, args);
    }
  };
}
});

unwrapExports(throttle_1);

var lib = createCommonjsModule(function (module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.forceCheck = exports.lazyload = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();



var _react2 = _interopRequireDefault(React__default);



var _reactDom2 = _interopRequireDefault(reactDom);



var _propTypes2 = _interopRequireDefault(propTypes);





var _scrollParent2 = _interopRequireDefault(scrollParent);



var _debounce2 = _interopRequireDefault(debounce_1);



var _throttle2 = _interopRequireDefault(throttle_1);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * react-lazyload
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


var defaultBoundingClientRect = { top: 0, right: 0, bottom: 0, left: 0, width: 0, height: 0 };
var LISTEN_FLAG = 'data-lazyload-listened';
var listeners = [];
var pending = [];

// try to handle passive events
var passiveEventSupported = false;
try {
  var opts = Object.defineProperty({}, 'passive', {
    get: function get() {
      passiveEventSupported = true;
    }
  });
  window.addEventListener('test', null, opts);
} catch (e) {}
// if they are supported, setup the optional params
// IMPORTANT: FALSE doubles as the default CAPTURE value!
var passiveEvent = passiveEventSupported ? { capture: false, passive: true } : false;

/**
 * Check if `component` is visible in overflow container `parent`
 * @param  {node} component React component
 * @param  {node} parent    component's scroll parent
 * @return {bool}
 */
var checkOverflowVisible = function checkOverflowVisible(component, parent) {
  var node = _reactDom2.default.findDOMNode(component);

  var parentTop = void 0;
  var parentLeft = void 0;
  var parentHeight = void 0;
  var parentWidth = void 0;

  try {
    var _parent$getBoundingCl = parent.getBoundingClientRect();

    parentTop = _parent$getBoundingCl.top;
    parentLeft = _parent$getBoundingCl.left;
    parentHeight = _parent$getBoundingCl.height;
    parentWidth = _parent$getBoundingCl.width;
  } catch (e) {
    parentTop = defaultBoundingClientRect.top;
    parentLeft = defaultBoundingClientRect.left;
    parentHeight = defaultBoundingClientRect.height;
    parentWidth = defaultBoundingClientRect.width;
  }

  var windowInnerHeight = window.innerHeight || document.documentElement.clientHeight;
  var windowInnerWidth = window.innerWidth || document.documentElement.clientWidth;

  // calculate top and height of the intersection of the element's scrollParent and viewport
  var intersectionTop = Math.max(parentTop, 0); // intersection's top relative to viewport
  var intersectionLeft = Math.max(parentLeft, 0); // intersection's left relative to viewport
  var intersectionHeight = Math.min(windowInnerHeight, parentTop + parentHeight) - intersectionTop; // height
  var intersectionWidth = Math.min(windowInnerWidth, parentLeft + parentWidth) - intersectionLeft; // width

  // check whether the element is visible in the intersection
  var top = void 0;
  var left = void 0;
  var height = void 0;
  var width = void 0;

  try {
    var _node$getBoundingClie = node.getBoundingClientRect();

    top = _node$getBoundingClie.top;
    left = _node$getBoundingClie.left;
    height = _node$getBoundingClie.height;
    width = _node$getBoundingClie.width;
  } catch (e) {
    top = defaultBoundingClientRect.top;
    left = defaultBoundingClientRect.left;
    height = defaultBoundingClientRect.height;
    width = defaultBoundingClientRect.width;
  }

  var offsetTop = top - intersectionTop; // element's top relative to intersection
  var offsetLeft = left - intersectionLeft; // element's left relative to intersection

  var offsets = Array.isArray(component.props.offset) ? component.props.offset : [component.props.offset, component.props.offset]; // Be compatible with previous API

  return offsetTop - offsets[0] <= intersectionHeight && offsetTop + height + offsets[1] >= 0 && offsetLeft - offsets[0] <= intersectionWidth && offsetLeft + width + offsets[1] >= 0;
};

/**
 * Check if `component` is visible in document
 * @param  {node} component React component
 * @return {bool}
 */
var checkNormalVisible = function checkNormalVisible(component) {
  var node = _reactDom2.default.findDOMNode(component);

  // If this element is hidden by css rules somehow, it's definitely invisible
  if (!(node.offsetWidth || node.offsetHeight || node.getClientRects().length)) return false;

  var top = void 0;
  var elementHeight = void 0;

  try {
    var _node$getBoundingClie2 = node.getBoundingClientRect();

    top = _node$getBoundingClie2.top;
    elementHeight = _node$getBoundingClie2.height;
  } catch (e) {
    top = defaultBoundingClientRect.top;
    elementHeight = defaultBoundingClientRect.height;
  }

  var windowInnerHeight = window.innerHeight || document.documentElement.clientHeight;

  var offsets = Array.isArray(component.props.offset) ? component.props.offset : [component.props.offset, component.props.offset]; // Be compatible with previous API

  return top - offsets[0] <= windowInnerHeight && top + elementHeight + offsets[1] >= 0;
};

/**
 * Detect if element is visible in viewport, if so, set `visible` state to true.
 * If `once` prop is provided true, remove component as listener after checkVisible
 *
 * @param  {React} component   React component that respond to scroll and resize
 */
var checkVisible = function checkVisible(component) {
  var node = _reactDom2.default.findDOMNode(component);
  if (!(node instanceof HTMLElement)) {
    return;
  }

  var parent = (0, _scrollParent2.default)(node);
  var isOverflow = component.props.overflow && parent !== node.ownerDocument && parent !== document && parent !== document.documentElement;
  var visible = isOverflow ? checkOverflowVisible(component, parent) : checkNormalVisible(component);
  if (visible) {
    // Avoid extra render if previously is visible
    if (!component.visible) {
      if (component.props.once) {
        pending.push(component);
      }

      component.visible = true;
      component.forceUpdate();
    }
  } else if (!(component.props.once && component.visible)) {
    component.visible = false;
    if (component.props.unmountIfInvisible) {
      component.forceUpdate();
    }
  }
};

var purgePending = function purgePending() {
  pending.forEach(function (component) {
    var index = listeners.indexOf(component);
    if (index !== -1) {
      listeners.splice(index, 1);
    }
  });

  pending = [];
};

var lazyLoadHandler = function lazyLoadHandler() {
  for (var i = 0; i < listeners.length; ++i) {
    var listener = listeners[i];
    checkVisible(listener);
  }
  // Remove `once` component in listeners
  purgePending();
};

// Depending on component's props
var delayType = void 0;
var finalLazyLoadHandler = null;

var isString = function isString(string) {
  return typeof string === 'string';
};

var LazyLoad = function (_Component) {
  _inherits(LazyLoad, _Component);

  function LazyLoad(props) {
    _classCallCheck(this, LazyLoad);

    var _this = _possibleConstructorReturn(this, (LazyLoad.__proto__ || Object.getPrototypeOf(LazyLoad)).call(this, props));

    _this.visible = false;
    return _this;
  }

  _createClass(LazyLoad, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      // It's unlikely to change delay type on the fly, this is mainly
      // designed for tests
      var scrollport = window;
      var scrollContainer = this.props.scrollContainer;

      if (scrollContainer) {
        if (isString(scrollContainer)) {
          scrollport = scrollport.document.querySelector(scrollContainer);
        }
      }
      var needResetFinalLazyLoadHandler = this.props.debounce !== undefined && delayType === 'throttle' || delayType === 'debounce' && this.props.debounce === undefined;

      if (needResetFinalLazyLoadHandler) {
        (0, event.off)(scrollport, 'scroll', finalLazyLoadHandler, passiveEvent);
        (0, event.off)(window, 'resize', finalLazyLoadHandler, passiveEvent);
        finalLazyLoadHandler = null;
      }

      if (!finalLazyLoadHandler) {
        if (this.props.debounce !== undefined) {
          finalLazyLoadHandler = (0, _debounce2.default)(lazyLoadHandler, typeof this.props.debounce === 'number' ? this.props.debounce : 300);
          delayType = 'debounce';
        } else if (this.props.throttle !== undefined) {
          finalLazyLoadHandler = (0, _throttle2.default)(lazyLoadHandler, typeof this.props.throttle === 'number' ? this.props.throttle : 300);
          delayType = 'throttle';
        } else {
          finalLazyLoadHandler = lazyLoadHandler;
        }
      }

      if (this.props.overflow) {
        var parent = (0, _scrollParent2.default)(_reactDom2.default.findDOMNode(this));
        if (parent && typeof parent.getAttribute === 'function') {
          var listenerCount = 1 + +parent.getAttribute(LISTEN_FLAG);
          if (listenerCount === 1) {
            parent.addEventListener('scroll', finalLazyLoadHandler, passiveEvent);
          }
          parent.setAttribute(LISTEN_FLAG, listenerCount);
        }
      } else if (listeners.length === 0 || needResetFinalLazyLoadHandler) {
        var _props = this.props,
            scroll = _props.scroll,
            resize = _props.resize;


        if (scroll) {
          (0, event.on)(scrollport, 'scroll', finalLazyLoadHandler, passiveEvent);
        }

        if (resize) {
          (0, event.on)(window, 'resize', finalLazyLoadHandler, passiveEvent);
        }
      }

      listeners.push(this);
      checkVisible(this);
    }
  }, {
    key: 'shouldComponentUpdate',
    value: function shouldComponentUpdate() {
      return this.visible;
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      if (this.props.overflow) {
        var parent = (0, _scrollParent2.default)(_reactDom2.default.findDOMNode(this));
        if (parent && typeof parent.getAttribute === 'function') {
          var listenerCount = +parent.getAttribute(LISTEN_FLAG) - 1;
          if (listenerCount === 0) {
            parent.removeEventListener('scroll', finalLazyLoadHandler, passiveEvent);
            parent.removeAttribute(LISTEN_FLAG);
          } else {
            parent.setAttribute(LISTEN_FLAG, listenerCount);
          }
        }
      }

      var index = listeners.indexOf(this);
      if (index !== -1) {
        listeners.splice(index, 1);
      }

      if (listeners.length === 0 && typeof window !== 'undefined') {
        (0, event.off)(window, 'resize', finalLazyLoadHandler, passiveEvent);
        (0, event.off)(window, 'scroll', finalLazyLoadHandler, passiveEvent);
      }
    }
  }, {
    key: 'render',
    value: function render() {
      return this.visible ? this.props.children : this.props.placeholder ? this.props.placeholder : _react2.default.createElement('div', { style: { height: this.props.height }, className: 'lazyload-placeholder' });
    }
  }]);

  return LazyLoad;
}(React__default.Component);

LazyLoad.propTypes = {
  once: _propTypes2.default.bool,
  height: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
  offset: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.arrayOf(_propTypes2.default.number)]),
  overflow: _propTypes2.default.bool,
  resize: _propTypes2.default.bool,
  scroll: _propTypes2.default.bool,
  children: _propTypes2.default.node,
  throttle: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.bool]),
  debounce: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.bool]),
  placeholder: _propTypes2.default.node,
  scrollContainer: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.object]),
  unmountIfInvisible: _propTypes2.default.bool
};

LazyLoad.defaultProps = {
  once: false,
  offset: 0,
  overflow: false,
  resize: false,
  scroll: true,
  unmountIfInvisible: false
};

var getDisplayName = function getDisplayName(WrappedComponent) {
  return WrappedComponent.displayName || WrappedComponent.name || 'Component';
};

var decorator = function decorator() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return function lazyload(WrappedComponent) {
    return function (_Component2) {
      _inherits(LazyLoadDecorated, _Component2);

      function LazyLoadDecorated() {
        _classCallCheck(this, LazyLoadDecorated);

        var _this2 = _possibleConstructorReturn(this, (LazyLoadDecorated.__proto__ || Object.getPrototypeOf(LazyLoadDecorated)).call(this));

        _this2.displayName = 'LazyLoad' + getDisplayName(WrappedComponent);
        return _this2;
      }

      _createClass(LazyLoadDecorated, [{
        key: 'render',
        value: function render() {
          return _react2.default.createElement(
            LazyLoad,
            options,
            _react2.default.createElement(WrappedComponent, this.props)
          );
        }
      }]);

      return LazyLoadDecorated;
    }(React__default.Component);
  };
};

exports.lazyload = decorator;
exports.default = LazyLoad;
exports.forceCheck = lazyLoadHandler;
});

var LazyLoad = unwrapExports(lib);
var lib_1 = lib.forceCheck;
var lib_2 = lib.lazyload;

// Styles
var absolutelyPositioned = styled.css(templateObject_1$3 || (templateObject_1$3 = __makeTemplateObject(["\n  position: absolute;\n  top: 0;\n  left: 0;\n"], ["\n  position: absolute;\n  top: 0;\n  left: 0;\n"])));
var backgroundAnimationDuration = styled.css(templateObject_2$2 || (templateObject_2$2 = __makeTemplateObject(["\n  ", "\n"], ["\n  ", "\n"])), function (_a) {
    var theme = _a.theme;
    return theme.backgroundAnimationDuration || '1500ms';
});
var backgroundAnimationDelay = styled.css(templateObject_3$2 || (templateObject_3$2 = __makeTemplateObject(["\n  ", "\n"], ["\n  ", "\n"])), function (_a) {
    var theme = _a.theme;
    return theme.backgroundAnimationDelay || '100ms';
});
// Animations
var fadeInKeyframes$1 = styled.keyframes(templateObject_4$2 || (templateObject_4$2 = __makeTemplateObject(["\n  0% {\n    opacity: 0\n  }\n  100% {\n    opacity: 1;\n  }\n"], ["\n  0% {\n    opacity: 0\n  }\n  100% {\n    opacity: 1;\n  }\n"])));
var zoomOutKeyframes = styled.keyframes(templateObject_5$2 || (templateObject_5$2 = __makeTemplateObject(["\n  0% {\n    opacity: 0;\n    transform: scale(1.5);\n  }\n  5% {\n    opacity: 1;\n  }\n  100% {\n    opacity: 1;\n    transform: scale(1);\n  }\n"], ["\n  0% {\n    opacity: 0;\n    transform: scale(1.5);\n  }\n  5% {\n    opacity: 1;\n  }\n  100% {\n    opacity: 1;\n    transform: scale(1);\n  }\n"])));
// Components
var Img = styled__default.img(templateObject_6$2 || (templateObject_6$2 = __makeTemplateObject(["\n  ", ";\n  opacity: 0;\n  z-index: -1;\n"], ["\n  ", ";\n  opacity: 0;\n  z-index: -1;\n"])), absolutelyPositioned);
var Background = styled__default.div(templateObject_7$2 || (templateObject_7$2 = __makeTemplateObject(["\n  &.slide-background-loader,\n  &.slide-background-loading,\n  &.slide-background-loaded {\n    ", ";\n  }\n\n  &.slide-background-loader {\n    opacity: 0;\n    z-index: -1;\n  }\n\n  &.slide-background-loading {\n    opacity: 0;\n    width: 100%;\n    height: 100%;\n    visibility: hidden;\n  }\n\n  &.slide-background-fade-in {\n    opacity: 0;\n    animation: ", " ", " ease-in-out ", " forwards;\n  }\n\n  &.slide-background-zoom-out {\n    opacity: 0;\n    transform: scale(1.5);\n    animation:\n      ", " ", " ease-in-out ", " forwards,\n      ", " 30000ms ease-in-out ", " forwards;\n  }\n"], ["\n  &.slide-background-loader,\n  &.slide-background-loading,\n  &.slide-background-loaded {\n    ", ";\n  }\n\n  &.slide-background-loader {\n    opacity: 0;\n    z-index: -1;\n  }\n\n  &.slide-background-loading {\n    opacity: 0;\n    width: 100%;\n    height: 100%;\n    visibility: hidden;\n  }\n\n  &.slide-background-fade-in {\n    opacity: 0;\n    animation: ", " ", " ease-in-out ", " forwards;\n  }\n\n  &.slide-background-zoom-out {\n    opacity: 0;\n    transform: scale(1.5);\n    animation:\n      ", " ", " ease-in-out ", " forwards,\n      ", " 30000ms ease-in-out ", " forwards;\n  }\n"])), absolutelyPositioned, fadeInKeyframes$1, backgroundAnimationDuration, backgroundAnimationDelay, fadeInKeyframes$1, backgroundAnimationDuration, backgroundAnimationDelay, zoomOutKeyframes, backgroundAnimationDelay);
var templateObject_1$3, templateObject_2$2, templateObject_3$2, templateObject_4$2, templateObject_5$2, templateObject_6$2, templateObject_7$2;

var useState$2 = React.useState, memo$3 = React.memo;
var SlideBackground = function (props) {
    var _a = props.shouldLazyLoad, shouldLazyLoad = _a === void 0 ? true : _a, lazyLoadingOffset = props.lazyLoadingOffset, width = props.width, height = props.height, onLoad = props.onLoad, alt = props.alt, background = __rest(props, ["shouldLazyLoad", "lazyLoadingOffset", "width", "height", "onLoad", "alt"]);
    var backgroundImage = background.backgroundImage, backgroundAnimation = background.backgroundAnimation;
    /**
     * If there are no `backgroundImage`, then there is no need to:
     * - Add the `Loading` class is not needed, instead the default class is `Loaded`.
     * - `img` tag element will not render.
     */
    var _b = useState$2((backgroundImage ? 'slide-background-loading' : 'slide-background-loaded')), className = _b[0], setClassName = _b[1];
    var onLoadHandler = function (event) {
        if (onLoad) {
            onLoad(event);
        }
        var className = ['slide-background-loaded'];
        switch (backgroundAnimation) {
            case EBackgroundAnimations.ZOOM:
                className.push('slide-background-zoom-out');
                break;
            case EBackgroundAnimations.FADE:
            default:
                className.push('slide-background-fade-in');
                break;
        }
        setClassName(className.join(' '));
    };
    var style = React.useMemo(function () {
        return __assign({ backgroundPosition: 'center top', backgroundSize: 'cover', width: width || '100%', height: height || '100%' }, background, { backgroundImage: backgroundImage ? "url('" + backgroundImage + "')" : undefined });
    }, [background, backgroundImage, height, width]);
    var content = (React.createElement(React.Fragment, null,
        backgroundImage && (React.createElement(Img, { className: "slide-background-loader", onLoad: onLoadHandler, alt: alt, src: backgroundImage })),
        React.createElement(Background, { style: style, className: className })));
    return (shouldLazyLoad ? (React.createElement(LazyLoad, { offset: lazyLoadingOffset || window.innerHeight, debounce: false, height: height || '100%' }, content)) : content);
};
var Background$1 = memo$3(SlideBackground);

// Styles
var sliderWidth = styled.css(templateObject_1$4 || (templateObject_1$4 = __makeTemplateObject(["\n  ", ";\n"], ["\n  ", ";\n"])), function (_a) {
    var theme = _a.theme;
    return "calc(" + (theme.sliderWidth || '100vw') + " * 0.66)";
});
var sliderHeight = styled.css(templateObject_2$3 || (templateObject_2$3 = __makeTemplateObject(["\n  ", ";\n"], ["\n  ", ";\n"])), function (_a) {
    var theme = _a.theme;
    return "calc(" + (theme.sliderHeight || '100vw') + " * 0.66)";
});
var maskDuration = function (multiplier) {
    if (multiplier === void 0) { multiplier = 1.5; }
    return styled.css(templateObject_3$3 || (templateObject_3$3 = __makeTemplateObject(["\n  ", ";\n"], ["\n  ", ";\n"])), function (_a) {
        var theme = _a.theme;
        return "calc(" + (theme.maskDuration || '200ms') + " * " + multiplier + ")";
    });
};
var backgroundFadeInDuration = styled.css(templateObject_4$3 || (templateObject_4$3 = __makeTemplateObject(["\n  ", ";\n"], ["\n  ", ";\n"])), function (_a) {
    var theme = _a.theme;
    return theme.backgroundFadeInDuration || '1500ms';
});
var backgroundFadeInDelay = styled.css(templateObject_5$3 || (templateObject_5$3 = __makeTemplateObject(["\n  ", ";\n"], ["\n  ", ";\n"])), function (_a) {
    var theme = _a.theme;
    return theme.backgroundFadeInDelay || '100ms';
});
// Animations
var maskSlideIn = styled.keyframes(templateObject_6$3 || (templateObject_6$3 = __makeTemplateObject(["\n  0% {\n    opacity: 0;\n  }\n  10% {\n    -webkit-clip-path: inset(50% 50% 50% 50%);\n    clip-path: inset(50% 50% 50% 50%);\n  }\n  100% {\n    opacity: 1;\n    -webkit-clip-path: inset(0 0 0 0);\n    clip-path: inset(0 0 0 0);\n  }\n"], ["\n  0% {\n    opacity: 0;\n  }\n  10% {\n    -webkit-clip-path: inset(50% 50% 50% 50%);\n    clip-path: inset(50% 50% 50% 50%);\n  }\n  100% {\n    opacity: 1;\n    -webkit-clip-path: inset(0 0 0 0);\n    clip-path: inset(0 0 0 0);\n  }\n"])));
// Components
var Mask = styled__default.div(templateObject_7$3 || (templateObject_7$3 = __makeTemplateObject(["\n  &.slide-background-mask {\n    overflow: hidden;\n    position: absolute;\n    left: 25%;\n    top: 50%;\n    width: ", ";\n    height: ", ";\n    max-width: 33%;\n    max-height: 50%;\n    -webkit-clip-path: polygon(0% 0%, 0% 100%, 16% 100%, 15% 15%, 85% 15%, 85% 85%, 15% 85%, 16% 100%, 100% 100%, 100% 0%);\n    clip-path: polygon(0% 0%, 0% 100%, 16% 100%, 15% 15%, 85% 15%, 85% 85%, 15% 85%, 16% 100%, 100% 100%, 100% 0%);\n    transform: translate3d(-33.33%, -50%, 0);\n    transition: all ", " ease 0s;\n  }\n  &.slide-background-mask:not(.slide-background-mask-active) {\n    opacity: 0;\n    z-index: 1;\n    transform: translate3d(33.33%, -50%, 0);\n    /* property name | duration | timing function | delay */\n    transition: all ", " ease 0s;\n  }\n  .slide-background-mask-inner {\n    z-index: -1;\n    position: absolute;\n    left: 50%;\n    top: 50%;\n    width: 200%;\n    height: 200%;\n    transform: translate3d(-50%, -50%, 0);\n    background-size: cover;\n    background-position: center center;\n    -webkit-transform-origin: 50% 16.5vh;\n    transform-origin: 50% 16.5vh;\n    transition: all ", " ease 0s;\n  }\n  .slide-background-mask-inner.slide-background-mask-inner-sliding {\n    transition: all ", " ease 0s;\n    transform: translate3d(-85%, -50%, 0);\n  }\n\n  @media (max-width: 1024px) {\n    &.slide-background-mask {\n      max-width: 50% !important;\n    }\n    .slide-background-mask-inner {\n      width: ", ";\n      height: ", ";\n    }\n  }\n"], ["\n  &.slide-background-mask {\n    overflow: hidden;\n    position: absolute;\n    left: 25%;\n    top: 50%;\n    width: ", ";\n    height: ", ";\n    max-width: 33%;\n    max-height: 50%;\n    -webkit-clip-path: polygon(0% 0%, 0% 100%, 16% 100%, 15% 15%, 85% 15%, 85% 85%, 15% 85%, 16% 100%, 100% 100%, 100% 0%);\n    clip-path: polygon(0% 0%, 0% 100%, 16% 100%, 15% 15%, 85% 15%, 85% 85%, 15% 85%, 16% 100%, 100% 100%, 100% 0%);\n    transform: translate3d(-33.33%, -50%, 0);\n    transition: all ", " ease 0s;\n  }\n  &.slide-background-mask:not(.slide-background-mask-active) {\n    opacity: 0;\n    z-index: 1;\n    transform: translate3d(33.33%, -50%, 0);\n    /* property name | duration | timing function | delay */\n    transition: all ", " ease 0s;\n  }\n  .slide-background-mask-inner {\n    z-index: -1;\n    position: absolute;\n    left: 50%;\n    top: 50%;\n    width: 200%;\n    height: 200%;\n    transform: translate3d(-50%, -50%, 0);\n    background-size: cover;\n    background-position: center center;\n    -webkit-transform-origin: 50% 16.5vh;\n    transform-origin: 50% 16.5vh;\n    transition: all ", " ease 0s;\n  }\n  .slide-background-mask-inner.slide-background-mask-inner-sliding {\n    transition: all ", " ease 0s;\n    transform: translate3d(-85%, -50%, 0);\n  }\n\n  @media (max-width: 1024px) {\n    &.slide-background-mask {\n      max-width: 50% !important;\n    }\n    .slide-background-mask-inner {\n      width: ", ";\n      height: ", ";\n    }\n  }\n"])), sliderWidth, sliderHeight, maskDuration(), maskDuration(1), maskDuration(1.66), maskDuration(1), sliderHeight, sliderHeight);
var Img$1 = styled__default.img(templateObject_8$2 || (templateObject_8$2 = __makeTemplateObject(["\n  &.slide-background-mask-loader {\n    opacity: 0;\n    z-index: -1;\n  }\n\n  &.slide-background-mask-loading {\n    opacity: 0;\n  }\n\n  &.slide-background-mask-loaded {\n    opacity: 0;\n    animation-name: ", ";\n    animation-timing-function: cubic-bezier(0.6, -0.28, 0.735, 0.045);\n    animation-fill-mode: forwards;\n    animation-duration: ", ";\n    animation-delay: ", ";\n  }\n"], ["\n  &.slide-background-mask-loader {\n    opacity: 0;\n    z-index: -1;\n  }\n\n  &.slide-background-mask-loading {\n    opacity: 0;\n  }\n\n  &.slide-background-mask-loaded {\n    opacity: 0;\n    animation-name: ", ";\n    animation-timing-function: cubic-bezier(0.6, -0.28, 0.735, 0.045);\n    animation-fill-mode: forwards;\n    animation-duration: ", ";\n    animation-delay: ", ";\n  }\n"])), maskSlideIn, backgroundFadeInDuration, backgroundFadeInDelay);
var templateObject_1$4, templateObject_2$3, templateObject_3$3, templateObject_4$3, templateObject_5$3, templateObject_6$3, templateObject_7$3, templateObject_8$2;

// Libraries
var useState$3 = React.useState, memo$4 = React.memo;
var BackgroundMask = function (props) {
    var background = props.background;
    var _a = useState$3('slide-background-mask-loading'), className = _a[0], setClassName = _a[1];
    var onLoadHandler = function () {
        setClassName('slide-background-mask-loaded');
    };
    var style = React.useMemo(function () {
        return {
            backgroundColor: background.backgroundColor,
            backgroundBlendMode: background.maskBackgroundBlendMode,
            backgroundImage: "url('" + background.backgroundImage + "')",
        };
    }, [background.backgroundColor, background.backgroundImage, background.maskBackgroundBlendMode]);
    var isLoaded = className === 'slide-background-mask-loaded';
    return (React.createElement(Mask, { className: [
            'slide-background-mask',
            (props.isActive && props.isDoneSliding) ? 'slide-background-mask-active' : 'slide-background-mask-inactive',
        ].join(' ') },
        React.createElement(LazyLoad, { offset: window.innerHeight, debounce: false, height: "100%" },
            React.createElement(Img$1, { className: "slide-background-mask-loader", onLoad: onLoadHandler, src: background.backgroundImage }),
            isLoaded && (React.createElement("div", { style: style, className: [
                    className,
                    isLoaded ? 'slide-background-mask-inner' : null,
                    (isLoaded && !props.isDoneSliding) ? 'slide-background-mask-inner-sliding' : null,
                ].join(' ') })))));
};
var Mask$1 = memo$4(BackgroundMask);

var useContext$2 = React.useContext, useEffect$2 = React.useEffect, useState$4 = React.useState, memo$5 = React.memo;
var HeroSlide = memo$5(function (props) {
    var shouldRenderMask = props.shouldRenderMask, style = props.style, background = props.background, onBackgroundLoad = props.onBackgroundLoad, children = props.children, navDescription = props.navDescription, rest = __rest(props, ["shouldRenderMask", "style", "background", "onBackgroundLoad", "children", "navDescription"]);
    var _a = useContext$2(SliderContext), dispatchProps = _a.dispatchProps, slidesArray = _a.slidesArray, slideProps = _a.slideProps, generateNewSlideId = _a.generateNewSlideId, removeSlideId = _a.removeSlideId;
    var _b = useState$4(slidesArray.length), slideNumber = _b[0], setSlideNumber = _b[1];
    var currentSlideData = slidesArray.find(function (_a) {
        var number = _a.slideNumber;
        return number === slideNumber;
    });
    useEffect$2(function () {
        if (dispatchProps &&
            !currentSlideData) {
            var newSlideNumber = generateNewSlideId();
            dispatchProps({
                type: EActionTypes.SET_SLIDE_DATA,
                payload: {
                    navDescription: navDescription,
                    slideNumber: newSlideNumber,
                },
            });
            setSlideNumber(newSlideNumber);
        }
    }, [dispatchProps, currentSlideData, slideNumber, slidesArray, navDescription, generateNewSlideId]);
    // When unmounting, remove the slideNumber.
    useEffect$2(function () {
        return function () {
            if (slideNumber)
                removeSlideId(slideNumber);
        };
    }, [slideNumber, removeSlideId]);
    /**
     * extendedTheme settings for the background
     * animation transitions.
     */
    var extendedTheme = React.useMemo(function () {
        return background ? {
            backgroundAnimationDuration: (background.backgroundAnimationDuration ?
                background.backgroundAnimationDuration + "ms" :
                undefined),
            backgroundAnimationDelay: (background.backgroundAnimationDelay ?
                background.backgroundAnimationDelay + "ms" :
                undefined),
        } : background;
    }, [background]);
    if (!currentSlideData ||
        !slideProps)
        return null;
    var activeSlide = slideProps.activeSlide, isDoneSliding = slideProps.isDoneSliding, slidingAnimation = slideProps.slidingAnimation;
    var currentSlide = slidesArray.indexOf(currentSlideData) + 1;
    var isActive = activeSlide === currentSlide;
    return (React.createElement(ExtendedThemeProvider$1, { extendedTheme: extendedTheme },
        React.createElement(StyledSlide, __assign({ style: __assign({}, style), isActive: isActive, isDoneSliding: isDoneSliding, slidingAnimation: slidingAnimation }, rest),
            React.createElement(Background$1, __assign({ onLoad: onBackgroundLoad }, background)),
            React.createElement("div", { className: "slide-wrapper" },
                shouldRenderMask ? (React.createElement(Mask$1, { background: background, isActive: isActive, isDoneSliding: isDoneSliding })) : null,
                children && (React.createElement("div", { className: [
                        'slide-container',
                        (isActive && isDoneSliding) ? 'slide-active' : null,
                    ].join(' ') }, children))))));
});
var Slide = function (props) { return React.createElement(HeroSlide, __assign({}, props)); };
Slide.displayName = 'hero-slider/slide';

// Animations
var fadeInKeyframes$2 = styled.keyframes(templateObject_1$5 || (templateObject_1$5 = __makeTemplateObject(["\n  0% {\n    opacity: 0;\n  }\n  100% {\n    opacity: 1;\n  }\n"], ["\n  0% {\n    opacity: 0;\n  }\n  100% {\n    opacity: 1;\n  }\n"])));
// Styles
var navFadeInDuration = styled.css(templateObject_2$4 || (templateObject_2$4 = __makeTemplateObject(["", ""], ["", ""])), function (_a) {
    var theme = _a.theme;
    return theme.navFadeInDuration || 500;
});
var navFadeInDelay = styled.css(templateObject_3$4 || (templateObject_3$4 = __makeTemplateObject(["", ""], ["", ""])), function (_a) {
    var theme = _a.theme;
    return theme.navFadeInDelay || 1000;
});
var navColor = styled.css(templateObject_4$4 || (templateObject_4$4 = __makeTemplateObject(["", ""], ["", ""])), function (_a) {
    var theme = _a.theme;
    return theme.navColor || 'rgba(200, 215, 235, 0.6)';
});
var navActiveColor = styled.css(templateObject_5$4 || (templateObject_5$4 = __makeTemplateObject(["", ""], ["", ""])), function (_a) {
    var theme = _a.theme;
    return theme.navActiveColor || 'rgba(200, 215, 235, 1)';
});
// CSS
var Wrapper$2 = styled__default.ul(templateObject_6$4 || (templateObject_6$4 = __makeTemplateObject(["\n  display: inline-flex;\n  margin: 0;\n  padding: 0;\n  list-style: none;\n  position: absolute;\n  z-index: 3;\n  opacity: 0;\n  animation: ", " ", " ease-in ", " forwards;\n\n  .slide-nav-button {\n    position: relative;\n    color: currentColor;\n    height: 50px;\n    max-width: 60px;\n    min-width: 50px;\n    width: 15%;\n    margin: 0 6px;\n    border-bottom: 2px solid ", ";\n    cursor: pointer;\n    transition: all 200ms cubic-bezier(0.175, 0.885, 0.32, 1.275);\n  }\n\n  .slide-nav-active-button {\n    border-color: ", "\n  }\n\n  @media (max-width: 744px) {\n    .slide-nav-button {\n      display: block;\n      cursor: pointer;\n      color: currentColor;\n      outline: none;\n      height: 14px;\n      width: 14px;\n      min-width: 14px;\n      max-width: 14px;\n      margin: 0 9px;\n      border: 0;\n      font-size: 0;\n      line-height: 0;\n      background: ", ";\n      border-radius: 50%;\n    }\n\n    .slide-nav-active-button {\n      background: ", ";\n    }\n  }\n"], ["\n  display: inline-flex;\n  margin: 0;\n  padding: 0;\n  list-style: none;\n  position: absolute;\n  z-index: 3;\n  opacity: 0;\n  animation: ", " ", " ease-in ", " forwards;\n\n  .slide-nav-button {\n    position: relative;\n    color: currentColor;\n    height: 50px;\n    max-width: 60px;\n    min-width: 50px;\n    width: 15%;\n    margin: 0 6px;\n    border-bottom: 2px solid ", ";\n    cursor: pointer;\n    transition: all 200ms cubic-bezier(0.175, 0.885, 0.32, 1.275);\n  }\n\n  .slide-nav-active-button {\n    border-color: ", "\n  }\n\n  @media (max-width: 744px) {\n    .slide-nav-button {\n      display: block;\n      cursor: pointer;\n      color: currentColor;\n      outline: none;\n      height: 14px;\n      width: 14px;\n      min-width: 14px;\n      max-width: 14px;\n      margin: 0 9px;\n      border: 0;\n      font-size: 0;\n      line-height: 0;\n      background: ", ";\n      border-radius: 50%;\n    }\n\n    .slide-nav-active-button {\n      background: ", ";\n    }\n  }\n"])), fadeInKeyframes$2, navFadeInDuration, navFadeInDelay, navColor, navActiveColor, navColor, navActiveColor);
var templateObject_1$5, templateObject_2$4, templateObject_3$4, templateObject_4$4, templateObject_5$4, templateObject_6$4;

var useContext$3 = React.useContext, useMemo = React.useMemo, memo$6 = React.memo;
var SliderNav = memo$6(function (props) {
    /**
     * Deconstructing navSettings to set it up.
     */
    var color = props.color, activeColor = props.activeColor, position = props.position;
    var _a = useContext$3(SliderContext), navProps = _a.navProps, slidesArray = _a.slidesArray;
    var navButtons = useMemo(function () {
        if (!navProps ||
            !slidesArray.length)
            return [];
        var changeSlide = navProps.changeSlide, activeSlide = navProps.activeSlide;
        var changeSlideHandler = function (navButtonIndex) {
            var nextSlide = navButtonIndex + 1;
            if (nextSlide !== activeSlide) {
                changeSlide(nextSlide);
            }
        };
        return slidesArray.map(function (_, index) {
            return (React.createElement("li", { onClick: function () { return changeSlideHandler(index); }, key: index, className: [
                    'slide-nav-button',
                    activeSlide === index + 1 ? 'slide-nav-active-button' : undefined,
                ].join(' ') }));
        });
    }, [navProps, slidesArray]);
    if (!navProps)
        return null;
    /**
     * CSS variables for the transitions.
     */
    var extendedTheme = {
        navColor: color,
        navActiveColor: activeColor,
    };
    return (React.createElement(ExtendedThemeProvider$1, { extendedTheme: extendedTheme },
        React.createElement(Wrapper$2, { style: __assign({ bottom: !position ? '1.5rem' : undefined, left: !position ? '50%' : undefined, transform: !position ? 'translateX(-50%)' : undefined }, position) }, navButtons)));
});
var Nav = function (props) { return React.createElement(SliderNav, __assign({}, props)); };
Nav.displayName = 'hero-slider/nav';

// Animations
var fadeInKeyframes$3 = styled.keyframes(templateObject_1$6 || (templateObject_1$6 = __makeTemplateObject(["\n  0% {\n    opacity: 0;\n  }\n  100% {\n    opacity: 1;\n  }\n"], ["\n  0% {\n    opacity: 0;\n  }\n  100% {\n    opacity: 1;\n  }\n"])));
// Styles
var navFadeInDuration$1 = styled.css(templateObject_2$5 || (templateObject_2$5 = __makeTemplateObject(["", ""], ["", ""])), function (_a) {
    var theme = _a.theme;
    return theme.navFadeInDuration || 500;
});
var navFadeInDelay$1 = styled.css(templateObject_3$5 || (templateObject_3$5 = __makeTemplateObject(["", ""], ["", ""])), function (_a) {
    var theme = _a.theme;
    return theme.navFadeInDelay || 1000;
});
var navColor$1 = styled.css(templateObject_4$5 || (templateObject_4$5 = __makeTemplateObject(["", ""], ["", ""])), function (_a) {
    var theme = _a.theme;
    return theme.navColor || '#C8D7EB';
});
var navActiveColor$1 = styled.css(templateObject_5$5 || (templateObject_5$5 = __makeTemplateObject(["", ""], ["", ""])), function (_a) {
    var theme = _a.theme;
    return theme.navActiveColor || '#FFFFFF';
});
var Wrapper$3 = styled__default.ul(templateObject_6$5 || (templateObject_6$5 = __makeTemplateObject(["\n  width: 60px;\n  position: absolute;\n  margin: 0;\n  padding: 0;\n  list-style: none;\n  z-index: 3;\n  opacity: 0;\n  animation: ", " ", " ease-in ", " forwards;\n\n  .slide-side-nav-button {\n    display: flex;\n    align-items: center;\n    position: relative;\n    margin: 0 auto;\n    padding: 0.5rem 0;\n    text-align: right;\n    color: ", ";\n    cursor: pointer;\n    transition: all 200ms cubic-bezier(0.175, 0.885, 0.32, 1.275);\n  }\n\n  .slide-side-nav-active-button {\n    color: ", ";\n  }\n\n  .slide-side-nav-button-line {\n    width: 20px;\n    height: 1px;\n    background-color: currentColor;\n    transition: all ease 200ms;\n  }\n\n  .slide-side-nav-button-number {\n    width: 10px;\n    font-size: 19px;\n    margin: 0;\n    transform: scaleX(0);\n    transition: all ease 200ms;\n  }\n\n  .slide-side-nav-active-button .slide-side-nav-button-line {\n    width: 50px;\n  }\n\n  .slide-side-nav-active-button .slide-side-nav-button-number {\n    margin: 0 0.5ch;\n    transform: scaleX(1);\n  }\n"], ["\n  width: 60px;\n  position: absolute;\n  margin: 0;\n  padding: 0;\n  list-style: none;\n  z-index: 3;\n  opacity: 0;\n  animation: ", " ", " ease-in ", " forwards;\n\n  .slide-side-nav-button {\n    display: flex;\n    align-items: center;\n    position: relative;\n    margin: 0 auto;\n    padding: 0.5rem 0;\n    text-align: right;\n    color: ", ";\n    cursor: pointer;\n    transition: all 200ms cubic-bezier(0.175, 0.885, 0.32, 1.275);\n  }\n\n  .slide-side-nav-active-button {\n    color: ", ";\n  }\n\n  .slide-side-nav-button-line {\n    width: 20px;\n    height: 1px;\n    background-color: currentColor;\n    transition: all ease 200ms;\n  }\n\n  .slide-side-nav-button-number {\n    width: 10px;\n    font-size: 19px;\n    margin: 0;\n    transform: scaleX(0);\n    transition: all ease 200ms;\n  }\n\n  .slide-side-nav-active-button .slide-side-nav-button-line {\n    width: 50px;\n  }\n\n  .slide-side-nav-active-button .slide-side-nav-button-number {\n    margin: 0 0.5ch;\n    transform: scaleX(1);\n  }\n"])), fadeInKeyframes$3, navFadeInDuration$1, navFadeInDelay$1, navActiveColor$1, navColor$1);
var templateObject_1$6, templateObject_2$5, templateObject_3$5, templateObject_4$5, templateObject_5$5, templateObject_6$5;

var useContext$4 = React.useContext, useMemo$1 = React.useMemo, memo$7 = React.memo;
var SliderNav$1 = memo$7(function (props) {
    /**
     * Deconstructing navSettings to set it up.
     */
    var color = props.color, activeColor = props.activeColor, left = props.left, right = props.right, position = props.position, _a = props.isPositionedRight, isPositionedRight = _a === void 0 ? true : _a;
    var _b = useContext$4(SliderContext), navProps = _b.navProps, slidesArray = _b.slidesArray;
    /**
     * CSS variables for the transitions.
     */
    var extendedTheme = {
        navColor: color,
        navActiveColor: activeColor,
    };
    var navButtons = useMemo$1(function () {
        if (!navProps ||
            !slidesArray.length)
            return [];
        var changeSlide = navProps.changeSlide, activeSlide = navProps.activeSlide;
        var changeSlideHandler = function (navButtonIndex) {
            var nextSlide = navButtonIndex + 1;
            if (nextSlide !== activeSlide) {
                changeSlide(nextSlide);
            }
        };
        return slidesArray.map(function (_, index) {
            var respectiveSlide = index + 1;
            return (React.createElement("li", { onClick: function () { return changeSlideHandler(index); }, key: index, className: [
                    'slide-side-nav-button',
                    activeSlide === respectiveSlide ? 'slide-side-nav-active-button' : undefined,
                ].join(' '), style: {
                    justifyContent: isPositionedRight ? 'flex-end' : 'flex-start',
                } },
                React.createElement("span", { className: "slide-side-nav-button-line" }),
                React.createElement("span", { className: "slide-side-nav-button-number" }, respectiveSlide)));
        });
    }, [navProps, slidesArray, isPositionedRight]);
    return (React.createElement(ExtendedThemeProvider$1, { extendedTheme: extendedTheme },
        React.createElement(Wrapper$3, { style: __assign({ top: !position ? '50%' : undefined, left: !position && !isPositionedRight ? left || '1rem' : undefined, right: !position && isPositionedRight ? right || '1rem' : undefined, transform: !position ? 'translateY(-50%)' : undefined }, position) }, navButtons)));
});
var SideNav = function (props) { return React.createElement(SliderNav$1, __assign({}, props)); };
SideNav.displayName = 'hero-slider/nav';

// Animations
var fadeInKeyframes$4 = styled.keyframes(templateObject_1$7 || (templateObject_1$7 = __makeTemplateObject(["\n  0% {\n    opacity: 0;\n  }\n  100% {\n    opacity: 1;\n  }\n"], ["\n  0% {\n    opacity: 0;\n  }\n  100% {\n    opacity: 1;\n  }\n"])));
// Styles
var navFadeInDuration$2 = styled.css(templateObject_2$6 || (templateObject_2$6 = __makeTemplateObject(["", ""], ["", ""])), function (_a) {
    var theme = _a.theme;
    return theme.navFadeInDuration || 500;
});
var navFadeInDelay$2 = styled.css(templateObject_3$6 || (templateObject_3$6 = __makeTemplateObject(["", ""], ["", ""])), function (_a) {
    var theme = _a.theme;
    return theme.navFadeInDelay || 1000;
});
var navColor$2 = styled.css(templateObject_4$6 || (templateObject_4$6 = __makeTemplateObject(["", ""], ["", ""])), function (_a) {
    var theme = _a.theme;
    return theme.navColor || 'rgba(215, 225, 235, 0.6)';
});
var navActiveColor$2 = styled.css(templateObject_5$6 || (templateObject_5$6 = __makeTemplateObject(["", ""], ["", ""])), function (_a) {
    var theme = _a.theme;
    return theme.navActiveColor || 'rgb(255, 255, 255)';
});
// Components
var Wrapper$4 = styled__default.div(templateObject_6$6 || (templateObject_6$6 = __makeTemplateObject(["\n  position: absolute;\n  display: flex;\n  z-index: 3;\n  width: 90%; /* May be placeholder. */\n  margin: 0 auto;\n  padding: 0;\n  cursor: pointer;\n  user-select: none;\n  opacity: 0;\n  animation: ", " ", " ease-in ", " forwards;\n\n  .slide-menu-nav-button {\n    list-style: none;\n    flex: 1;\n    position: relative;\n    display: flex;\n    align-items: center;\n    color: var(--nav-active-color, #FFF);\n    min-height: 15%;\n    height: auto;\n    margin: 1rem 0;\n    padding: 0.5rem 0.75rem;\n  }\n\n  .slide-menu-nav-button:not(:first-child):not(:last-child) {\n    border-left: 1px solid var(--nav-color, rgba(215, 225, 235, 0.6));\n  }\n\n  .slide-menu-nav-button-description {\n    display: flex;\n    align-items: center;\n    width: 100%;\n    padding: 0 0.5rem;\n  }\n\n  .slide-menu-nav-button-number {\n    position: relative;\n    display: inline-flex;\n    justify-content: center;\n    align-items: center;\n    position: relative;\n    min-width: 36px;\n    width: 36px;\n    height: 36px;\n    line-height: 36px;\n    backface-visibility: hidden;\n    color: var(--nav-active-color, #FFF);\n    font-size: 12px;\n  }\n\n  .slide-menu-nav-button-number .slide-menu-nav-button-square {\n    background-color: transparent;\n    border-radius: 5px;\n    box-shadow: 2px 2px 2px rgba(0, 0, 0, 0.18);\n    display: block;\n    height: 100%;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: rotate(45deg) translate(-50%, -50%);\n    transform-origin: 0px 0px;\n    width: 24px;\n    height: 24px;\n    z-index: -1;\n    border: 1px solid #fff;\n    opacity: 0.5;\n  }\n\n  .slide-menu-nav-button-text {\n    width: 80%;\n    padding-left: 1.4rem;\n    font-weight: 700;\n    font-size: 12px;\n  }\n"], ["\n  position: absolute;\n  display: flex;\n  z-index: 3;\n  width: 90%; /* May be placeholder. */\n  margin: 0 auto;\n  padding: 0;\n  cursor: pointer;\n  user-select: none;\n  opacity: 0;\n  animation: ", " ", " ease-in ", " forwards;\n\n  .slide-menu-nav-button {\n    list-style: none;\n    flex: 1;\n    position: relative;\n    display: flex;\n    align-items: center;\n    color: var(--nav-active-color, #FFF);\n    min-height: 15%;\n    height: auto;\n    margin: 1rem 0;\n    padding: 0.5rem 0.75rem;\n  }\n\n  .slide-menu-nav-button:not(:first-child):not(:last-child) {\n    border-left: 1px solid var(--nav-color, rgba(215, 225, 235, 0.6));\n  }\n\n  .slide-menu-nav-button-description {\n    display: flex;\n    align-items: center;\n    width: 100%;\n    padding: 0 0.5rem;\n  }\n\n  .slide-menu-nav-button-number {\n    position: relative;\n    display: inline-flex;\n    justify-content: center;\n    align-items: center;\n    position: relative;\n    min-width: 36px;\n    width: 36px;\n    height: 36px;\n    line-height: 36px;\n    backface-visibility: hidden;\n    color: var(--nav-active-color, #FFF);\n    font-size: 12px;\n  }\n\n  .slide-menu-nav-button-number .slide-menu-nav-button-square {\n    background-color: transparent;\n    border-radius: 5px;\n    box-shadow: 2px 2px 2px rgba(0, 0, 0, 0.18);\n    display: block;\n    height: 100%;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: rotate(45deg) translate(-50%, -50%);\n    transform-origin: 0px 0px;\n    width: 24px;\n    height: 24px;\n    z-index: -1;\n    border: 1px solid #fff;\n    opacity: 0.5;\n  }\n\n  .slide-menu-nav-button-text {\n    width: 80%;\n    padding-left: 1.4rem;\n    font-weight: 700;\n    font-size: 12px;\n  }\n"])), fadeInKeyframes$4, navFadeInDuration$2, navFadeInDelay$2);
var Container$1 = styled__default.div(templateObject_7$4 || (templateObject_7$4 = __makeTemplateObject(["\n  display: flex;\n  flex-grow: 1;\n  position: relative;\n  margin: 0;\n  padding: 0;\n  border-top: 1px solid ", ";\n"], ["\n  display: flex;\n  flex-grow: 1;\n  position: relative;\n  margin: 0;\n  padding: 0;\n  border-top: 1px solid ", ";\n"])), navColor$2);
var Bar = styled__default.div(templateObject_8$3 || (templateObject_8$3 = __makeTemplateObject(["\n  position: absolute;\n  top: 0px;\n  height: 4px;\n  background-color: ", ";\n  opacity: 0.75;\n  transition: transform 400ms ease;\n"], ["\n  position: absolute;\n  top: 0px;\n  height: 4px;\n  background-color: ", ";\n  opacity: 0.75;\n  transition: transform 400ms ease;\n"])), navActiveColor$2);
var ExtraButtonWrapper = styled__default.div(templateObject_9$1 || (templateObject_9$1 = __makeTemplateObject(["\n  display: flex;\n  min-width: 50px;\n  margin: 0;\n  padding: 0;\n  color: ", ";\n  border-top: 1px solid ", ";\n  order: ", ";\n"], ["\n  display: flex;\n  min-width: 50px;\n  margin: 0;\n  padding: 0;\n  color: ", ";\n  border-top: 1px solid ", ";\n  order: ", ";\n"])), navActiveColor$2, navColor$2, function (_a) {
    var isExtraButtonRight = _a.isExtraButtonRight;
    return (isExtraButtonRight ? 1 : 0);
});
var ExtraButton = styled__default.span(templateObject_10$1 || (templateObject_10$1 = __makeTemplateObject(["\n  flex: 1;\n  color: ", ";\n  min-height: 15%;\n  height: auto;\n  margin: 1rem 0;\n  padding: 0;\n  ", ";\n"], ["\n  flex: 1;\n  color: ", ";\n  min-height: 15%;\n  height: auto;\n  margin: 1rem 0;\n  padding: 0;\n  ",
    ";\n"])), navActiveColor$2, function (_a) {
    var isExtraButtonRight = _a.isExtraButtonRight;
    return (isExtraButtonRight ? "\n    border-left: 1px solid " + navColor$2 + ";\n  " : "\n    border-right: 1px solid " + navColor$2 + ";\n  ");
});
var templateObject_1$7, templateObject_2$6, templateObject_3$6, templateObject_4$6, templateObject_5$6, templateObject_6$6, templateObject_7$4, templateObject_8$3, templateObject_9$1, templateObject_10$1;

var useContext$5 = React.useContext, useMemo$2 = React.useMemo, memo$8 = React.memo;
var SliderNav$2 = memo$8(function (props) {
    /**
     * Deconstructing MenuNavSettings to set it up.
     */
    var color = props.color, activeColor = props.activeColor, position = props.position, justifyContent = props.justifyContent, _a = props.sliderWidth, sliderWidth = _a === void 0 ? window.innerWidth : _a, _b = props.mobileThreshold, mobileThreshold = _b === void 0 ? 1024 : _b, isNullAfterThreshold = props.isNullAfterThreshold, extraButton = props.extraButton, _c = props.isExtraButtonRight, isExtraButtonRight = _c === void 0 ? true : _c;
    var _d = useContext$5(SliderContext), navProps = _d.navProps, slidesArray = _d.slidesArray;
    var MenuNavButtons = useMemo$2(function () {
        if (!navProps ||
            !slidesArray.length)
            return [];
        var changeSlide = navProps.changeSlide, activeSlide = navProps.activeSlide;
        var changeSlideHandler = function (MenuNavButtonIndex) {
            var nextSlide = MenuNavButtonIndex + 1;
            if (nextSlide !== activeSlide) {
                changeSlide(nextSlide);
            }
        };
        return slidesArray.map(function (_a, index) {
            var navDescription = _a.navDescription;
            var description = navDescription;
            var respectiveSlide = index + 1;
            return (React.createElement("li", { onClick: function () { return changeSlideHandler(index); }, key: index, className: [
                    'slide-menu-nav-button',
                    activeSlide === respectiveSlide && 'slide-menu-nav-active-button',
                ].join(' ') },
                React.createElement("div", { className: "slide-menu-nav-button-description" },
                    React.createElement("div", { className: "slide-menu-nav-button-number" },
                        respectiveSlide,
                        React.createElement("span", { className: "slide-menu-nav-button-square" })),
                    React.createElement("div", { className: "slide-menu-nav-button-text" }, description))));
        });
    }, [navProps, slidesArray]);
    if (sliderWidth <= mobileThreshold) {
        if (isNullAfterThreshold)
            return null;
        return (React.createElement(Nav, __assign({}, props)));
    }
    if (!navProps)
        return null;
    var activeSlide = navProps.activeSlide, totalSlides = navProps.totalSlides;
    /**
     * CSS variables for the transitions.
     */
    var extendedTheme = {
        navColor: color,
        navActiveColor: activeColor,
    };
    return (React.createElement(ExtendedThemeProvider$1, { extendedTheme: extendedTheme },
        React.createElement(Wrapper$4, { style: __assign({ bottom: !position ? '0' : undefined, left: !position ? '50%' : undefined, transform: !position ? 'translateX(-50%)' : undefined, justifyContent: justifyContent || 'center' }, position) },
            extraButton && (React.createElement(ExtraButtonWrapper, { isExtraButtonRight: isExtraButtonRight },
                React.createElement(ExtraButton, { isExtraButtonRight: isExtraButtonRight }, extraButton))),
            React.createElement(Container$1, null,
                MenuNavButtons,
                React.createElement(Bar, { style: {
                        width: 100 / totalSlides + "%",
                        transform: "translate3d(" + (activeSlide - 1) + "00%, 0, 0)",
                    } })))));
});
var MenuNav = function (props) { return React.createElement(SliderNav$2, __assign({}, props)); };
MenuNav.displayName = 'hero-slider/menu-nav';

// Animations
var fadeInKeyframes$5 = styled.keyframes(templateObject_1$8 || (templateObject_1$8 = __makeTemplateObject(["\n  0% {\n    opacity: 0;\n  }\n  100% {\n    opacity: 1;\n  }\n"], ["\n  0% {\n    opacity: 0;\n  }\n  100% {\n    opacity: 1;\n  }\n"])));
// Styles
var navFadeInDuration$3 = styled.css(templateObject_2$7 || (templateObject_2$7 = __makeTemplateObject(["", ""], ["", ""])), function (_a) {
    var theme = _a.theme;
    return theme.navFadeInDuration || 500;
});
var navFadeInDelay$3 = styled.css(templateObject_3$7 || (templateObject_3$7 = __makeTemplateObject(["", ""], ["", ""])), function (_a) {
    var theme = _a.theme;
    return theme.navFadeInDelay || 1000;
});
var navColor$3 = styled.css(templateObject_4$7 || (templateObject_4$7 = __makeTemplateObject(["", ""], ["", ""])), function (_a) {
    var theme = _a.theme;
    return theme.navColor || 'rgb(255, 255, 255)';
});
var navActiveColor$3 = styled.css(templateObject_5$7 || (templateObject_5$7 = __makeTemplateObject(["", ""], ["", ""])), function (_a) {
    var theme = _a.theme;
    return theme.navActiveColor || 'rgb(59, 62, 69)';
});
var navBackgroundColor = function (defaultBackgroundColor) { return styled.css(templateObject_6$7 || (templateObject_6$7 = __makeTemplateObject(["", ""], ["", ""])), function (_a) {
    var theme = _a.theme;
    return theme.navBackgroundColor || defaultBackgroundColor;
}); };
// Components
var Wrapper$5 = styled__default.div(templateObject_7$5 || (templateObject_7$5 = __makeTemplateObject(["\n  position: absolute;\n  display: inline-flex;\n  z-index: 3;\n  margin: 0 auto;\n  padding: 0;\n  cursor: pointer;\n  user-select: none;\n  opacity: 0;\n  animation: ", " ", " ease-in ", " forwards;\n"], ["\n  position: absolute;\n  display: inline-flex;\n  z-index: 3;\n  margin: 0 auto;\n  padding: 0;\n  cursor: pointer;\n  user-select: none;\n  opacity: 0;\n  animation: ", " ", " ease-in ", " forwards;\n"])), fadeInKeyframes$5, navFadeInDuration$3, navFadeInDelay$3);
var Container$2 = styled__default.ul(templateObject_8$4 || (templateObject_8$4 = __makeTemplateObject(["\n  display: flex;\n  position: relative;\n  max-width: 100%;\n  height: 54px;\n  margin: 0;\n  padding: 0;\n  white-space: nowrap;\n"], ["\n  display: flex;\n  position: relative;\n  max-width: 100%;\n  height: 54px;\n  margin: 0;\n  padding: 0;\n  white-space: nowrap;\n"])));
var buttonStyle = styled.css(templateObject_9$2 || (templateObject_9$2 = __makeTemplateObject(["\n  display: inline-flex;\n  align-items: center;\n  position: relative;\n  width: 240px;\n  height: 48px;\n  list-style: none;\n  cursor: pointer;\n  background-color: transparent;\n  color: ", ";\n  flex-basis: 0;\n  flex-grow: 1;\n  transition: all 200ms ease-in-out;\n  outline: 0;\n  padding: 0;\n  font-weight: 600;\n\n  &:not(.slide-button-nav-active-button):before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    opacity: 0.5;\n    background-color: ", ";\n    z-index: -1;\n    transition: all 200ms ease-in-out;\n  }\n\n  &:hover:not(.slide-button-nav-active-button) {\n    background-color: ", ";\n    color: ", ";\n  }\n\n  &:not(.slide-button-nav-active-button):not(:first-child) {\n    box-shadow: -1px 0px 0px 0px ", ";\n  }\n\n  &.slide-button-nav-active-button {\n    height: 54px;\n    cursor: default;\n    color: ", ";\n    background-color: transparent;\n  }\n\n  /* Backgrounds set in :before to allow for opacity */\n  &.slide-button-nav-active-button:before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    opacity: 0.95;\n    box-shadow: -1px 0px 0px 0px ", ";\n    background-color: ", ";\n    z-index: -1;\n    transition: all 200ms ease-in-out;\n  }\n\n  &.slide-button-nav-active-button + .Button,\n  &.slide-button-nav-active-button + .ExtraButton {\n    box-shadow: -1px 0px 0px 0px transparent !important;\n  }\n"], ["\n  display: inline-flex;\n  align-items: center;\n  position: relative;\n  width: 240px;\n  height: 48px;\n  list-style: none;\n  cursor: pointer;\n  background-color: transparent;\n  color: ", ";\n  flex-basis: 0;\n  flex-grow: 1;\n  transition: all 200ms ease-in-out;\n  outline: 0;\n  padding: 0;\n  font-weight: 600;\n\n  &:not(.slide-button-nav-active-button):before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    opacity: 0.5;\n    background-color: ", ";\n    z-index: -1;\n    transition: all 200ms ease-in-out;\n  }\n\n  &:hover:not(.slide-button-nav-active-button) {\n    background-color: ", ";\n    color: ", ";\n  }\n\n  &:not(.slide-button-nav-active-button):not(:first-child) {\n    box-shadow: -1px 0px 0px 0px ", ";\n  }\n\n  &.slide-button-nav-active-button {\n    height: 54px;\n    cursor: default;\n    color: ", ";\n    background-color: transparent;\n  }\n\n  /* Backgrounds set in :before to allow for opacity */\n  &.slide-button-nav-active-button:before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    opacity: 0.95;\n    box-shadow: -1px 0px 0px 0px ", ";\n    background-color: ", ";\n    z-index: -1;\n    transition: all 200ms ease-in-out;\n  }\n\n  &.slide-button-nav-active-button + .Button,\n  &.slide-button-nav-active-button + .ExtraButton {\n    box-shadow: -1px 0px 0px 0px transparent !important;\n  }\n"])), navColor$3, navBackgroundColor('rgba(255, 255, 255, 0.8)'), navColor$3, navActiveColor$3, navBackgroundColor('rgba(215, 225, 235, 0.8)'), navColor$3, navActiveColor$3, navActiveColor$3);
var ExtraButton$1 = styled__default.div(templateObject_10$2 || (templateObject_10$2 = __makeTemplateObject(["\n  ", ";\n  align-items: unset;\n  color: ", ";\n  box-shadow: -1px 0px 0px 0px ", ";\n"], ["\n  ", ";\n  align-items: unset;\n  color: ", ";\n  box-shadow: -1px 0px 0px 0px ", ";\n"])), buttonStyle, navColor$3, navBackgroundColor('rgba(215, 225, 235, 0.8)'));
var Button = styled__default.li(templateObject_11$1 || (templateObject_11$1 = __makeTemplateObject(["\n  ", ";\n"], ["\n  ", ";\n"])), buttonStyle);
var Description = styled__default.div(templateObject_12$1 || (templateObject_12$1 = __makeTemplateObject(["\n  display: flex;\n  align-items: center;\n  width: 100%;\n  padding: 0 0.5rem;\n"], ["\n  display: flex;\n  align-items: center;\n  width: 100%;\n  padding: 0 0.5rem;\n"])));
var Text = styled__default.div(templateObject_13$1 || (templateObject_13$1 = __makeTemplateObject(["\n  width: 95%;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  overflow: hidden;\n  text-align: center;\n  text-transform: uppercase;\n  color: inherit;\n  letter-spacing: 0.1rem;\n  font-size: 0.75rem;\n  line-height: 1rem;\n"], ["\n  width: 95%;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  overflow: hidden;\n  text-align: center;\n  text-transform: uppercase;\n  color: inherit;\n  letter-spacing: 0.1rem;\n  font-size: 0.75rem;\n  line-height: 1rem;\n"])));
var templateObject_1$8, templateObject_2$7, templateObject_3$7, templateObject_4$7, templateObject_5$7, templateObject_6$7, templateObject_7$5, templateObject_8$4, templateObject_9$2, templateObject_10$2, templateObject_11$1, templateObject_12$1, templateObject_13$1;

var useContext$6 = React.useContext, useMemo$3 = React.useMemo, memo$9 = React.memo;
var SliderNav$3 = memo$9(function (props) {
    /**
     * Deconstructing ButtonNavSettings to set it up.
     */
    var color = props.color, activeColor = props.activeColor, backgroundColor = props.backgroundColor, position = props.position, justifyContent = props.justifyContent, alignItems = props.alignItems, _a = props.sliderWidth, sliderWidth = _a === void 0 ? window.innerWidth : _a, _b = props.mobileThreshold, mobileThreshold = _b === void 0 ? 1024 : _b, isNullAfterThreshold = props.isNullAfterThreshold, extraButton = props.extraButton, isExtraButtonRight = props.isExtraButtonRight;
    var _c = useContext$6(SliderContext), navProps = _c.navProps, slidesArray = _c.slidesArray;
    /**
     * CSS variables for the transitions.
     */
    var extendedTheme = {
        navColor: color,
        navActiveColor: activeColor,
        navBackgroundColor: backgroundColor,
    };
    var ButtonNavButtons = useMemo$3(function () {
        if (!navProps ||
            !slidesArray.length)
            return [];
        var changeSlide = navProps.changeSlide, activeSlide = navProps.activeSlide;
        var changeSlideHandler = function (ButtonNavButtonIndex) {
            var nextSlide = ButtonNavButtonIndex + 1;
            if (nextSlide !== activeSlide) {
                changeSlide(nextSlide);
            }
        };
        return slidesArray.map(function (_a, index) {
            var navDescription = _a.navDescription;
            var description = navDescription;
            var respectiveSlide = index + 1;
            return (React.createElement(Button, { key: index, onClick: function () { return changeSlideHandler(index); }, className: activeSlide === respectiveSlide ? 'slide-button-nav-active-button' : undefined },
                React.createElement(Description, null,
                    React.createElement(Text, null, description))));
        });
    }, [navProps, slidesArray]);
    if (sliderWidth <= mobileThreshold) {
        if (isNullAfterThreshold)
            return null;
        return (React.createElement(Nav, __assign({}, props)));
    }
    return (React.createElement(ExtendedThemeProvider$1, { extendedTheme: extendedTheme },
        React.createElement(Wrapper$5, { style: __assign({ bottom: !position ? '0' : undefined, left: !position ? '50%' : undefined, transform: !position ? 'translateX(-50%)' : undefined }, position) },
            React.createElement(Container$2, { style: {
                    justifyContent: justifyContent || 'center',
                    /**
                     * The **vertical alignment** of the buttons can be set manually.
                     * If it's undefined and if there is a position top passed as prop,
                     * then `alignItems` will be `flex-start`. Otherwise,
                     * it is set as `flex-end`.
                     */
                    alignItems: (alignItems || ((position && position.top !== undefined) ? 'flex-start' : 'flex-end')),
                } },
                ButtonNavButtons,
                extraButton && (React.createElement(ExtraButton$1, { style: {
                        order: isExtraButtonRight ? 1 : 0,
                    } }, extraButton))))));
});
var ButtonsNav = function (props) { return React.createElement(SliderNav$3, __assign({}, props)); };
ButtonsNav.displayName = 'hero-slider/menu-nav';

var Button$1 = styled__default.button(templateObject_1$9 || (templateObject_1$9 = __makeTemplateObject(["\n  & {\n    z-index: 3;\n    position: absolute;\n    color: inherit;\n    /* Placeholders */\n    width: 62px;\n    height: 62px;\n    /* Disabling default button CSS. */\n    padding: 0;\n    margin: 0;\n    outline: none;\n    background: transparent;\n    border: 0;\n  }\n\n  & svg path {\n    transition: d 200ms;\n  }\n"], ["\n  & {\n    z-index: 3;\n    position: absolute;\n    color: inherit;\n    /* Placeholders */\n    width: 62px;\n    height: 62px;\n    /* Disabling default button CSS. */\n    padding: 0;\n    margin: 0;\n    outline: none;\n    background: transparent;\n    border: 0;\n  }\n\n  & svg path {\n    transition: d 200ms;\n  }\n"])));
var templateObject_1$9;

var useContext$7 = React.useContext, useState$5 = React.useState, memo$a = React.memo;
var AutoplayButtons = memo$a(function (props) {
    var className = props.className, style = props.style, position = props.position;
    var autoplayButtonProps = useContext$7(SliderContext).autoplayButtonProps;
    var _a = useState$5(EAutoplayButtons.PAUSE), buttonType = _a[0], setButtonType = _a[1];
    if (!autoplayButtonProps)
        return null;
    var setIsManuallyPaused = autoplayButtonProps.setIsManuallyPaused, autoplayHandlerTimeout = autoplayButtonProps.autoplayHandlerTimeout, shouldAutoplay = autoplayButtonProps.shouldAutoplay, autoplay = autoplayButtonProps.autoplay;
    var autoplayInstance = autoplay && autoplay.current;
    if (!autoplayInstance || !shouldAutoplay)
        return null;
    var playPath = 'M 12,26 18.5,22 18.5,14 12,10 z M 18.5,22 25,18 25,18 18.5,14 z';
    var pausePath = 'M 12,26 16,26 16,10 12,10 z M 21,26 25,26 25,10 21,10 z';
    var playHandler = function () {
        autoplayInstance.resume();
        setButtonType(EAutoplayButtons.PAUSE);
        setIsManuallyPaused(false);
    };
    var pauseHandler = function () {
        autoplayInstance.pause();
        setButtonType(EAutoplayButtons.PLAY);
        setIsManuallyPaused(true);
    };
    var onClickHandler = function (event) {
        event.stopPropagation();
        clearTimeout(autoplayHandlerTimeout && +autoplayHandlerTimeout);
        switch (buttonType) {
            case EAutoplayButtons.PAUSE:
                pauseHandler();
                break;
            case EAutoplayButtons.PLAY:
                playHandler();
                break;
        }
    };
    var setPath = function () {
        switch (buttonType) {
            case EAutoplayButtons.PLAY:
                return playPath;
            case EAutoplayButtons.PAUSE:
                return pausePath;
        }
    };
    return (React.createElement(Button$1, { className: className, onClick: onClickHandler, style: __assign({ bottom: !position ? '0' : undefined, left: !position ? '0' : undefined }, position, style) },
        React.createElement("svg", { fill: "currentColor", height: "100%", width: "100%", viewBox: "0 0 36 36" },
            React.createElement("path", { d: setPath() }))));
});
var AutoplayButton = function (props) { return (React.createElement(AutoplayButtons, __assign({}, props))); };
AutoplayButton.displayName = 'hero-slider/autoplay-button';

var OverlayContainer = styled__default.div(templateObject_1$a || (templateObject_1$a = __makeTemplateObject(["\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  z-index: 3;\n  pointer-events: none;\n\n  * {\n    pointer-events: auto;\n  }\n"], ["\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  z-index: 3;\n  pointer-events: none;\n\n  * {\n    pointer-events: auto;\n  }\n"])));
var templateObject_1$a;

exports.AutoplayButton = AutoplayButton;
exports.ButtonsNav = ButtonsNav;
exports.MenuNav = MenuNav;
exports.Nav = Nav;
exports.OverlayContainer = OverlayContainer;
exports.SideNav = SideNav;
exports.Slide = Slide;
exports.default = Slider;
//# sourceMappingURL=index.js.map
